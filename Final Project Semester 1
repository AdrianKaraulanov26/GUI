import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.MalformedURLException;
import java.net.URL;
import java.util.ArrayList;
import java.util.Random;

class TimerPanel {
    private Timer timer;
    private int timeLeft;
    private JLabel countdownLabel;
    private JButton startButton, stopButton, resetButton;
    private JComboBox<String> timeSelector;

    public TimerPanel(JLabel countdownLabel, JButton startButton, JButton stopButton, JButton resetButton, JComboBox<String> timeSelector) {
        this.countdownLabel = countdownLabel;
        this.startButton = startButton;
        this.stopButton = stopButton;
        this.resetButton = resetButton;
        this.timeSelector = timeSelector;
        this.timeLeft = 0;

        timer = new Timer(1000, e -> updateCountdown());

        startButton.addActionListener(e -> startCountdown());
        stopButton.addActionListener(e -> stopCountdown());
        resetButton.addActionListener(e -> resetCountdown());
    }

    private void startCountdown() {
        if (!timer.isRunning()) {
            if (timeLeft == 0) {
                String selectedTime = (String) timeSelector.getSelectedItem();
                timeLeft = parseTime(selectedTime);
                countdownLabel.setText(selectedTime);
            }
            timer.start();
        }
    }

    private void stopCountdown() {
        timer.stop();
    }

    private void resetCountdown() {
        timer.stop();
        timeLeft = 0;
        countdownLabel.setText((String) timeSelector.getSelectedItem());
    }

    private void updateCountdown() {
        if (timeLeft > 0) {
            timeLeft--;
            countdownLabel.setText(formatTime(timeLeft));
        } else {
            timer.stop();
            countdownLabel.setText((String) timeSelector.getSelectedItem());
        }
    }
    // method for taking the string within the label and turning it into seconds
    private int parseTime(String time) {
        String[] parts = time.split(":");
        int minutes = Integer.parseInt(parts[0]);
        int seconds = Integer.parseInt(parts[1]);
        return minutes * 60 + seconds;
    }

    private String formatTime(int totalSeconds) {
        int minutes = totalSeconds / 60;
        int seconds = totalSeconds % 60;
        return String.format("%02d:%02d", minutes, seconds);
    }
}
class StopwatchPanel {
    private int time_stopwatch;
    private JLabel stopwatchLabel, flagLabel;
    private JButton startButton, stopButton, resetButton, flagButton;
    private Timer timer;

    public StopwatchPanel(JLabel stopwatchLabel, JLabel flagLabel, JButton startButton, JButton stopButton, JButton resetButton, JButton flagButton) {
        this.stopwatchLabel = stopwatchLabel;
        this.flagLabel = flagLabel;
        this.startButton = startButton;
        this.stopButton = stopButton;
        this.resetButton = resetButton;
        this.flagButton = flagButton;
        this.time_stopwatch = 0;
        timer = new Timer(1000, e -> updateCountdown());

        startButton.addActionListener(e -> start_stopwatch());
        stopButton.addActionListener(e -> stop_stopwatch());
        resetButton.addActionListener(e -> resetCountdown());
        flagButton.addActionListener(e -> flag_countdown());
    }

    private void start_stopwatch() {
        timer.start();
    }
    private void stop_stopwatch(){
        timer.stop();
    }
    private void resetCountdown(){
        timer.stop();
        time_stopwatch = 0;
        stopwatchLabel.setText("00:00");
        flagLabel.setText("00:00");
    }
    private void updateCountdown() {
        if (time_stopwatch >= 0) {
            time_stopwatch++;
            stopwatchLabel.setText(formatTime(time_stopwatch));
        }
    }
    private void flag_countdown(){
        flagLabel.setText(stopwatchLabel.getText());
    }
    public String formatTime(int totalSeconds) {
        int minutes = totalSeconds / 60;
        int seconds = totalSeconds % 60;
        return String.format("%02d:%02d", minutes, seconds);
    }
}
class FitnessTracker {
    private int reps;
    private int sets;
    private double caloriesBurned;
    private int repsLimit;
    private String exercise;
    private JLabel sets_label, reps_label, calories_label, main_label;
    private JButton addRep, reset_tracker;
    private JComboBox reps_in_set, exercises;
    private String selectedExercise;
    private double cals_pe = 1;
    private String encouragement;
    private JTextField calories_goal;
    private double goal;
    public FitnessTracker(JLabel sets_label, JLabel reps_label, JLabel calories_label, JButton addRep,JButton reset_tracker, JComboBox reps_in_set, JComboBox exercises, JLabel main_label, JTextField calories_goal) {
        this.sets_label = sets_label;
        this.reps_label = reps_label;
        this.calories_label = calories_label;
        this.addRep = addRep;
        this.reps_in_set = reps_in_set;
        this.exercises = exercises;
        this.reset_tracker = reset_tracker;
        this.reps = 0;
        this.sets = 0;
        this.caloriesBurned = 0;
        this.repsLimit = 10;
        this.main_label = main_label;
        this.calories_goal = calories_goal;
        parseCalorieGoal();
        addRep.addActionListener(e -> {
            incrementReps(cals_pe);
            sets_label.setText("Sets: " + getSets());
            reps_label.setText("Reps: " + getReps());
            calories_label.setText("Calories: " + getCaloriesBurned());
            parseCalorieGoal();
        });
        reps_in_set.addActionListener(e -> {
            String selectedRegime = (String) reps_in_set.getSelectedItem();
            setRepsLimit(Integer.parseInt(selectedRegime));
        });
        exercises.addActionListener(e -> {
            selectedExercise = (String) exercises.getSelectedItem();
            chooseExercise();
        });
        reset_tracker.addActionListener(e ->{
            resetTracker();
            sets_label.setText("Sets: 0");
            reps_label.setText("Reps: 0");
            calories_label.setText("Calories: 0");
        });

    }
    private void parseCalorieGoal() {
        try {
            goal = Double.parseDouble(calories_goal.getText());
        } catch (NumberFormatException e) {
            goal = 0;
        }
    }

    public void chooseExercise(){
        switch (selectedExercise){
            case "Squats":
                cals_pe = 2.5;
                break;
            case "Push-ups":
                cals_pe = 2;
                break;
            case "Pull-ups":
                cals_pe = 3;
                break;
            case "Dips":
                cals_pe = 3;
                break;
            case "Bench-press":
                cals_pe = 4;
                break;
            default:
                cals_pe = 2;
        }
    }
    public String choose_encouragement(){
        int courage = (int) Math.floor(Math.random()*5);
        if(goal<caloriesBurned){
            return encouragement = "You did it Buddy, you can rest today!";
        }
        return switch (courage) {
            case 1 -> encouragement = "Doing great!";
            case 2 -> encouragement = "Light work buddy!";
            case 3 -> encouragement = "Another set young one";
            case 4 -> encouragement = "Those calories ain't burning themselves";
            case 5 -> encouragement = "Sacrifice yourself for the gain";
            default -> encouragement = "Let's get going!";
        };

    }
    public void incrementReps(double calories) {
        reps++;
        caloriesBurned += calories;
        if (reps >= repsLimit) {
            reps = 0;
            sets++;
            main_label.setText(choose_encouragement());
        }
    }

    public void setRepsLimit(int repsLimit) {
        this.repsLimit = repsLimit;
    }

    public int getReps() {
        return reps;
    }

    public int getSets() {
        return sets;
    }

    public double getCaloriesBurned() {
        return caloriesBurned;
    }

    public void resetTracker() {
        this.reps = 0;
        this.sets = 0;
        this.caloriesBurned = 0;
        goal = 0;
        main_label.setText("Select a calorie goal and let's train!");
        calories_goal.setText("Calorie goal");
    }
}
class CalorieTracker {
    private int caloriesConsumed;
    private int protein;
    private int carbs;
    private int fats;
    private JLabel protein_label, carbs_label, fats_label, calories_label, main_label;
    private JComboBox protein_dropdown, carbs_dropdown, snacks_dropdown, drinks_dropdown;
    private JTextField limiter;
    private JButton reset;
    private String encouragement;
    private int limit;
    private Timer timer;
    public CalorieTracker(JLabel protein_label, JLabel carbs_label, JLabel fats_label, JLabel calories_label, JComboBox protein_dropdown, JComboBox carbs_dropdown, JComboBox snacks_dropdown, JComboBox drinks_dropdown, JButton reset, JLabel main_label, JTextField limiter) {
        this.protein_label = protein_label;
        this.calories_label =calories_label;
        this.fats_label = fats_label;
        this.carbs_label = carbs_label;
        this.protein_dropdown = protein_dropdown;
        this.carbs_dropdown = carbs_dropdown;
        this.snacks_dropdown = snacks_dropdown;
        this.drinks_dropdown = drinks_dropdown;
        this.reset = reset;
        this.limiter = limiter;
        this.caloriesConsumed = 0;
        this.protein = 0;
        this.carbs = 0;
        this.fats = 0;
        timer = new Timer(10000, e -> main_label.setText(choose_encouragement()));
        timer.start();
        protein_dropdown.addActionListener(e -> {
            extract_protein();
            updateLabels();
        });
        carbs_dropdown.addActionListener(e -> {
            extract_carbs();
            updateLabels();
        });
        snacks_dropdown.addActionListener(e -> {
            extract_snacks();
            updateLabels();
        });
        drinks_dropdown.addActionListener(e ->{
            extract_drinks();
            updateLabels();
        });
        reset.addActionListener(e -> {
            resetTracker();
        });
    }
    private String choose_encouragement() {
        int courage = (int) Math.floor(Math.random() * 20) + 1;
        limit = Integer.parseInt(limiter.getText());

        if (limit < getCaloriesConsumed()) {
            return "You have reached your calorie limit!";
        }

        return switch (courage) {
            case 1 -> "Doing great!";
            case 2 -> "Gains are made in the kitchen!";
            case 3 -> "Eating is building.";
            case 4 -> "Bodybuilders eat a lot, don't be afraid!";
            case 5 -> "Calories are made to be consumed!";
            case 6 -> "Your body is your temple, feed it well!";
            case 7 -> "Progress comes with every bite!";
            case 8 -> "Stronger with every meal!";
            case 9 -> "Building muscle, one calorie at a time!";
            case 10 -> "You're fueling your gains!";
            case 11 -> "Keep eating, keep growing!";
            case 12 -> "Food is fuel, keep going!";
            case 13 -> "Your body is a machine, feed it!";
            case 14 -> "A good workout starts with good nutrition!";
            case 15 -> "Nourishment is the first step to greatness!";
            case 16 -> "You're one step closer to your goals!";
            case 17 -> "Fuel your ambition!";
            case 18 -> "Gains don't happen overnight!";
            case 19 -> "Keep up the good work, the results will come!";
            case 20 -> "Every calorie counts towards your goal!";
            default -> "TERMINATOR";
        };
    }
    private void extract_protein(){
        String selectedItem = (String) protein_dropdown.getSelectedItem();
        switch (selectedItem){
            case String s when s.contains("Chicken") -> {addMacros(31, 0, 4, 165);}
            case String s when s.contains("Eggs") -> {addMacros(13,1,11,155);}
            case String s when s.contains("Beef") -> {addMacros(26,0,17,250);}
            case String s when s.contains("Salmon") -> {addMacros(22,0,16,206);}
            case String s when s.contains("Pork") -> {addMacros(26,0,4,143);}
            case String s when s.contains("Shrimp") -> {addMacros(24,0,1,99);}
            case String s when s.contains("Tofu") -> {addMacros(15,0,9,144);}
            default -> {addMacros(0,0,0,0);}
        }
    }
    private void extract_carbs(){
        String selectedItem = (String) carbs_dropdown.getSelectedItem();
        switch (selectedItem){
            case String s when s.contains("Rice") -> {addMacros(0, 28, 0, 130);}
            case String s when s.contains("Bread") -> {addMacros(0,49,0,219);}
            case String s when s.contains("Pasta") -> {addMacros(0,25,0,120);}
            case String s when s.contains("Potatoes") -> {addMacros(0,37,0,90);}
            case String s when s.contains("Quinoa") -> {addMacros(0,21,0,120);}
            case String s when s.contains("Fries") -> {addMacros(0,37,15,311);}
            default -> {addMacros(0,0,0,0);}
        }
    }
    private void extract_snacks(){
        String selectedItem = (String) snacks_dropdown.getSelectedItem();
        switch (selectedItem){
            case String s when s.contains("Apple") -> {addMacros(0, 25, 0, 95);}
            case String s when s.contains("Banana") -> {addMacros(0, 27, 0, 105);}
            case String s when s.contains("Granola Bar") -> {addMacros(0, 22, 10, 150);}
            case String s when s.contains("Chips") -> {addMacros(0, 15, 10, 150);}
            case String s when s.contains("Popcorn") -> {addMacros(0, 18, 0, 90);}
            case String s when s.contains("Chocolate") -> {addMacros(0, 15, 10, 150);}
            default -> {addMacros(0,0,0,0);}
        }
    }
    private void extract_drinks(){
        String selectedItem = (String) drinks_dropdown.getSelectedItem();
        switch (selectedItem){
            case String s when s.contains("Soda") -> {addMacros(0, 39, 0, 150);}
            case String s when s.contains("Orange Juice") -> {addMacros(0, 26, 0, 110);}
            case String s when s.contains("Milk") -> {addMacros(0, 12, 0, 150);}
            case String s when s.contains("Beer") -> {addMacros(0, 13, 0, 150);}
            case String s when s.contains("Coffee") -> {addMacros(0, 0, 0, 2);}
            case String s when s.contains("Tea") -> {addMacros(0, 0, 0, 2);}
            default -> {addMacros(0,0,0,0);}
        }
    }
    public void addMacros(int protein, int carbs, int fats, int calories) {
        this.protein += protein;
        this.carbs += carbs;
        this.fats += fats;
        this.caloriesConsumed += calories;
    }

    private int getProtein() {
        return protein;
    }

    private int getCarbs() {
        return carbs;
    }

    private int getFats() {
        return fats;
    }

    private int getCaloriesConsumed() {
        return caloriesConsumed;
    }

    private void resetTracker() {
        this.caloriesConsumed = 0;
        this.protein = 0;
        this.carbs = 0;
        this.fats = 0;
        updateLabels();
    }
    private void updateLabels(){
        protein_label.setText("Protein: " + getProtein() + "g");
        fats_label.setText("Fats: " + getFats()+ "g") ;
        carbs_label.setText("Carbs: " + getCarbs() + "g");
        calories_label.setText("Calories: " + getCaloriesConsumed());
    }

}
class Bankai extends JPanel implements ActionListener {
    private static final int PANEL_WIDTH = 2000;
    private static final int PANEL_HEIGHT = 1200;
    private static final int TIMER_DELAY = 16; // ~60 FPS IMPORTANT

    private final int numPetals;
    private final ArrayList<Petals> petals = new ArrayList<>();
    private final Timer timer;
    private Image byakuyaImage;

    public Bankai(String imageUrl, int numPetals) throws MalformedURLException {
        this.numPetals = numPetals;
        setPreferredSize(new Dimension(PANEL_WIDTH, PANEL_HEIGHT));
        setBackground(Color.BLACK);

        URL byakuyaUrl = new URL(imageUrl);
        byakuyaImage = new ImageIcon(byakuyaUrl).getImage();

        initPetals();

        timer = new Timer(TIMER_DELAY, this);
        timer.start();
    }

    private void initPetals() {
        Random random = new Random();
        for (int i = 0; i < numPetals; i++) {
            double angle = random.nextDouble() * 2 * Math.PI;
            double radius = random.nextDouble() * 800 + 320;
            petals.add(new Petals(PANEL_WIDTH / 2, PANEL_HEIGHT / 2, angle, radius));
        }
    }

    public void paintComponent(Graphics g) { // I used this tutorial gor the 2d graphics https://www.youtube.com/watch?v=KcEvHq8Pqs0
        super.paintComponent(g);
        Graphics2D g2d = (Graphics2D) g;
        int imgWidth = byakuyaImage.getWidth(null) / 2;
        int imgHeight = byakuyaImage.getHeight(null) / 2;
        g2d.drawImage(byakuyaImage, (PANEL_WIDTH - imgWidth-60) / 2, (PANEL_HEIGHT - imgHeight) / 2, imgWidth, imgHeight, null);

        for (Petals petal : petals) {
            petal.draw(g2d);
        }
    }

    public void actionPerformed(ActionEvent e) {
        for (Petals petal : petals) {
            petal.update();
        }
        repaint();
    }

    class Petals {
        private double centerX, centerY;
        private double angle, radius;
        private double speed;
        private final Color color;

        public Petals(double centerX, double centerY, double angle, double radius) {
            this.centerX = centerX;
            this.centerY = centerY;
            this.angle = angle;
            this.radius = radius;
            this.speed = 0.02 + Math.random() * 0.03; // Random speed
            this.color = new Color(255, 182, 193, 200);
        }

        public void update() {
            angle += speed;
        }

        public void draw(Graphics2D petals) {
            double x = centerX + Math.cos(angle) * radius;
            double y = centerY + Math.sin(angle) * radius;
            petals.setColor(color);
            petals.fillOval((int) x - 10, (int) y - 5, 20, 10);
        }
    }
}
class CookieClicker{
    private JButton cookie;
    private JComboBox upgrades;
    private JLabel cookies;
    private JTextField name;
    private Timer timer;
    private double num_cookies;
    private double rate_cookies;
    String upgrade_selected;
    private int cursors;
    private int grandmas;
    private int farms;
    private int mines;
    private int factories;
    private int banks;
    public CookieClicker(JButton cookie, JComboBox upgrades, JLabel cookies, JTextField name) {
        this.cookie = cookie;
        this.upgrades = upgrades;
        this.cookies = cookies;
        this.name = name;
        this.timer = new Timer(1000, e -> update());
        this.timer.start();

        upgrades.addActionListener(e -> BuyUpgrade());
        cookie.addActionListener(e -> {
            num_cookies += 5+ rate_cookies;
            cookies.setText("Cookies: " + num_cookies);
        });

    }
    void update(){
        num_cookies+=rate_cookies;
        cookies.setText("Cookies: " + num_cookies);
    }
    void BuyUpgrade(){
        upgrade_selected = (String) upgrades.getSelectedItem();

            switch (upgrade_selected){
                case String s when s.contains("Cursor") -> {if(num_cookies >= (50 + (cursors * 25))){
                    num_cookies -= (50 + (cursors * 25));
                    cursors++;
                    rate_cookies +=((double) 1/2);
                }}
                case String s when s.contains("Grandma") -> {if(num_cookies >= (500 + (grandmas * 125))){
                    num_cookies -= (500 + (grandmas * 125));
                    grandmas++;
                    rate_cookies +=5;
                }}
                case String s when s.contains("Farm") -> {if(num_cookies >= (5000 + (farms * 750))){
                    num_cookies -= (5000 + (farms * 750));
                    farms++;
                    rate_cookies +=50;
                }}
                case String s when s.contains("Mine") -> {if(num_cookies >= (50000 + (mines * 2500))){
                    num_cookies -= (50000 + (mines * 2500));
                    mines++;
                    rate_cookies +=500;
                }}
                case String s when s.contains("Factory") -> {if(num_cookies >= (500000 + (factories * 17500))){
                    num_cookies -= (500000 + (factories * 17500));
                    factories++;
                    rate_cookies +=5000;
                }}
                case String s when s.contains("Bank") -> {if(num_cookies >= (5000000 + (banks * 75000))){
                    num_cookies -= (5000000 + (banks * 75000));
                    banks++;
                    rate_cookies += 50000;
                }}
                default -> {}
        }
    }
    int returnCursor_price(){
        return (50 + (cursors * 25));
    }
    int returnGrandma_price(){
        return (500 + (grandmas * 125));
    }
    int returnFarm_price(){
        return (50 + (cursors * 25));
    }
    int returnMine_price(){
        return (500 + (grandmas * 125));
    }
    int returnFactory_price(){
        return (50 + (cursors * 25));
    }
    int returnBank_price(){
        return (500 + (grandmas * 125));
    }
}
public class Main {
    private JFrame frame;
    private CardLayout cardLayout;
    private JPanel mainPanel;

    public static void main(String[] args) throws MalformedURLException {
        new Main().createGUI();
    }
    // the GUI is the main component of the Main class, since the cardLayout and JPanels have to bo defined for the entire class, not individual methods
    public void createGUI() throws MalformedURLException {
        frame = new JFrame("Phone Clock App");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(2040, 1160);
        frame.setLocationRelativeTo(null);

        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);

        JPanel mainMenuPanel = createMainMenuPanel();
        JPanel countdownPanel = createCountdownPanel();
        JPanel panel2 = createStopwatchPanel();
        JPanel panel3 = createFitnessTrackerPanel();
        JPanel panel4 = createCalorieTrackerPanel();
        JPanel panel5 = createBankai();
        JPanel panel6 = createCookieClicker();

        mainPanel.add(mainMenuPanel, "MainMenu");
        mainPanel.add(countdownPanel, "Panel1");
        mainPanel.add(panel2, "Panel2");
        mainPanel.add(panel3, "Panel3");
        mainPanel.add(panel4, "Panel4");
        mainPanel.add(panel5, "Panel5");
        mainPanel.add(panel6, "Panel6");

        cardLayout.show(mainPanel, "MainMenu");

        frame.add(mainPanel);
        frame.setVisible(true);
    }

    public JPanel createMainMenuPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(2, 5, 20, 20));
        panel.setBackground(new Color(30, 30, 30));

        URL[] iconURLs = null;
        try {
            iconURLs = new URL[]{
                    new URL("https://cdn-icons-png.flaticon.com/512/4893/4893024.png"), // Online URL
                    new URL("https://cdn-icons-png.flaticon.com/512/3003/3003202.png"), // Local file paths use "file:///" prefix
                    new URL("https://cdn-icons-png.flaticon.com/512/6750/6750831.png"), // Replace spaces with "%20"
                    new URL("https://cdn-icons-png.flaticon.com/512/2058/2058065.png"),
                    new URL("https://images-wixmp-ed30a86b8c4ca887773594c2.wixmp.com/f/062e5e10-0d29-4a44-941a-de4fad7ab823/d7j5cbh-92f99e6f-234b-493e-ab79-30af027a0fcc.png?token=eyJ0eXAiOiJKV1QiLCJhbGciOiJIUzI1NiJ9.eyJzdWIiOiJ1cm46YXBwOjdlMGQxODg5ODIyNjQzNzNhNWYwZDQxNWVhMGQyNmUwIiwiaXNzIjoidXJuOmFwcDo3ZTBkMTg4OTgyMjY0MzczYTVmMGQ0MTVlYTBkMjZlMCIsIm9iaiI6W1t7InBhdGgiOiJcL2ZcLzA2MmU1ZTEwLTBkMjktNGE0NC05NDFhLWRlNGZhZDdhYjgyM1wvZDdqNWNiaC05MmY5OWU2Zi0yMzRiLTQ5M2UtYWI3OS0zMGFmMDI3YTBmY2MucG5nIn1dXSwiYXVkIjpbInVybjpzZXJ2aWNlOmZpbGUuZG93bmxvYWQiXX0.PtspoHaaQuRZfHvCk_2FIK8AbrPYRS5QKyxkSpHj6d4"),
                    new URL("https://cdn-icons-png.flaticon.com/512/614/614180.png")
            };
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }

        for (int i = 0; i < iconURLs.length; i++) {
            ImageIcon icon = new ImageIcon(iconURLs[i]);
            JButton button = new JButton(icon);
            button.setPreferredSize(new Dimension(60, 60));
            int panelNumber = i + 1;

            button.addActionListener(e -> {
                cardLayout.show(mainPanel, "Panel" + panelNumber);
            });

            button.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    button.setBackground(new Color(120, 120, 120));
                }

                public void mouseExited(java.awt.event.MouseEvent evt) {
                    button.setBackground(new Color(60, 60, 60));
                }
            });

            button.setBackground(new Color(60, 60, 60));
            button.setBorder(BorderFactory.createEmptyBorder());
            button.setFocusPainted(false);
            panel.add(button);
        }

        return panel;
    }

    public JPanel createCountdownPanel() {
        JPanel panel1 = createPanel("Countdown", 1);
        JLabel countdown = Create_label("00:00", 200, 530, 125, 900, 400);
        JButton start = Create_button("Start", 50, 530, 550, 400, 80, 12, 200, 12);
        JButton stop = Create_button("Stop", 50, 1020, 550, 400, 80, 200, 12, 12);
        JButton reset = Create_button("Reset", 50, 1020, 655, 400, 80, 200, 200, 100);

        String[] timelines = {
                "01:00", "02:00", "05:00", "10:00"
        };
        JComboBox<String> comboBox = Create_combobox(timelines, 45, 530, 655, 400, 80);

        panel1.add(countdown);
        panel1.add(start);
        panel1.add(stop);
        panel1.add(reset);
        panel1.add(comboBox);

        // Initialize TimerPanel logic
        new TimerPanel(countdown, start, stop, reset, comboBox);

        return panel1;
    }

    public JPanel createStopwatchPanel() {
        JPanel panel2 = createPanel("Stopwatch", 2);
        JLabel countdown_stop = Create_label("00:00", 200, 530, 125, 900, 400);
        JButton start_stop = Create_button("Start", 50, 530, 550, 400, 80, 12, 200, 12);
        JButton stop_stop = Create_button("Stop", 50, 1020, 550, 400, 80, 200, 12, 12);
        JButton reset_stop = Create_button("Reset", 50, 1020, 655, 400, 80, 200, 200, 12);
        JButton flag_stop = Create_button("Flag", 50, 530, 655, 400, 80, 12, 155, 155);
        JLabel flag_time = Create_label("00:00", 100, 530, 760, 900, 200);
        panel2.add(countdown_stop);
        panel2.add(start_stop);
        panel2.add(stop_stop);
        panel2.add(reset_stop);
        panel2.add(flag_stop);
        panel2.add(flag_time);
        new StopwatchPanel(countdown_stop, flag_time, start_stop, stop_stop, reset_stop, flag_stop);
        return panel2;
    }

    public JPanel createFitnessTrackerPanel() throws MalformedURLException {
        JPanel panel = createPanel("Fitness Tracker", 3);

        JLabel setsLabel = Create_label("Sets: 0", 50, 50, 300, 500, 100);
        JLabel repsLabel = Create_label("Reps: 0", 50, 50, 425, 500, 100);
        JLabel caloriesLabel = Create_label("Calories: 0", 50, 50, 550, 500, 100);
        JLabel main_label = Create_label("Select a calorie goal and let's train!", 80, 300, 100, 1400, 150);
        JButton repButton = Create_button("Add Rep", 50, 50, 675, 400, 100, 50, 200, 50);
        JButton resetTracker = Create_button("Reset", 50, 50, 800, 400, 100, 50, 200, 50);
        JComboBox<String> regimeSelector = Create_combobox(new String[]{"Reps in a set","6", "8", "10", "12", "14"}, 50, 650, 300, 500, 100);
        URL ronnieURL = new URL("https://media3.giphy.com/media/nIDFKbfyUx68r7bTEb/giphy.gif?cid=6c09b952jngtv4p9xmotgj69lcojhre3ccz7gwnb7aades4h&ep=v1_internal_gif_by_id&rid=giphy.gif&ct=s");
        JTextField calorie_goal = new JTextField("Calorie Goal");
        calorie_goal.setBounds(650,550,500,100);
        calorie_goal.setFont(new Font("Arial", Font.HANGING_BASELINE, 50));
        calorie_goal.setOpaque(true);
        calorie_goal.setBackground(new Color(63, 81, 181));
        calorie_goal.setForeground(Color.WHITE);
        ImageIcon ronnieIcon = new ImageIcon(ronnieURL);
        JButton ronnieButton = Create_button("Ronnie Coleman", 40, 1200, 150, 850, 700, 50, 200, 50);
        ronnieButton.setIcon(ronnieIcon);
        ronnieButton.setBorderPainted(false);
        ronnieButton.setContentAreaFilled(false);
        ronnieButton.setOpaque(false);
        ronnieButton.setForeground(Color.YELLOW);
        JComboBox<String> exercises = Create_combobox(new String[]{"Exercise","Squats", "Push-ups", "Pull-ups", "Dips", "Bench-press"}, 50, 650, 425, 500, 100);
        FitnessTracker fitnessTracker = new FitnessTracker(setsLabel, repsLabel, caloriesLabel ,repButton,resetTracker,regimeSelector,exercises, main_label, calorie_goal);

        panel.add(setsLabel);
        panel.add(repsLabel);
        panel.add(caloriesLabel);
        panel.add(repButton);
        panel.add(regimeSelector);
        panel.add(resetTracker);
        panel.add(exercises);
        panel.add(main_label);
        panel.add(ronnieButton);
        panel.add(calorie_goal);
        return panel;
    }

    public JPanel createCalorieTrackerPanel() throws MalformedURLException {
        JPanel panel = createPanel("Calorie Counter", 4);

        JLabel proteinLabel = Create_label("Protein: 0g", 40, 50, 400, 300, 80);
        JLabel carbsLabel = Create_label("Carbs: 0g", 40, 50, 500, 300, 80);
        JLabel fatsLabel = Create_label("Fats: 0g", 40, 50, 600, 300, 80);
        JLabel caloriesLabel = Create_label("Calories: 0", 40, 50, 700, 300, 80);
        JLabel main_label = Create_label("Set a calorie limit and build gains", 65, 300, 100, 1400, 150);
        JTextField limiter = new JTextField("Calorie limit");
        limiter.setBounds(400, 800, 600, 100);
        limiter.setFont(new Font("Arial", Font.HANGING_BASELINE, 50));
        limiter.setOpaque(true);
        limiter.setBackground(new Color(63, 81, 181));
        limiter.setForeground(Color.WHITE);
        URL arnoldURL = new URL("https://www.pngplay.com/wp-content/uploads/6/Arnold-Schwarzenegger-Shirtless-PNG.png");
        ImageIcon arnoldIcon = new ImageIcon(arnoldURL);
        JButton arnoldButton = Create_button("Arnold", 40, 1200, 270, 800, 900, 50, 200, 50);
        arnoldButton.setIcon(arnoldIcon);
        arnoldButton.setBorderPainted(false);
        arnoldButton.setContentAreaFilled(false);
        arnoldButton.setOpaque(false);
        arnoldButton.setForeground(Color.YELLOW);
        JButton reset = Create_button("Reset", 50, 50, 800, 300,80, 90,255,90);
        String[] proteins = {
                "Common proteins per 100g",
                "Chicken - 31g protein, 165 cal, 4g fat",
                "Eggs - 13g protein, 155 cal, 11g fat, 1g carbs",
                "Beef - 26g protein, 250 cal, 17g fat",
                "Salmon - 22g protein, 206 cal, 16g fat",
                "Pork - 26g protein, 143 cal, 4g fat",
                "Shrimp - 24g protein, 99 cal, 1g fat",
                "Tofu - 15g protein, 144 cal, 9g fat",
                "Chickpeas - 9g protein, 164 cal, 3g fat"
        };
        String[] carbs = {
                "Common carbs per 100g",
                "Rice - 28g carbs, 130 cal",
                "Bread - 49g carbs, 219 cal",
                "Pasta - 25g carbs, 120 cal",
                "Potatoes - 37g carbs, 90 cal",
                "Quinoa - 21g carbs, 120 cal",
                "Fries - 37g carbs, 311 cal, 15g fat"
        };
        String[] snacks = {
                "Common snacks per serving size",
                "Apple - 25g carbs, 95 cal",
                "Banana - 27g carbs, 105 cal",
                "Granola Bar - 22g carbs, 150 cal",
                "Chips - 15g carbs, 150 cal",
                "Popcorn - 18g carbs, 90 cal",
                "Chocolate - 15g carbs, 150 cal, 10g fat"
        };
        String[] drinks = {
                "Common drinks",
                "Soda 355ml - 39g carbs, 140 cal",
                "Orange Juice 250ml - 26g carbs, 110 cal",
                "Milk 250ml - 12g carbs, 150 cal",
                "Beer 355ml - 13g carbs, 150 cal",
                "Coffee unsweetened - 0g carbs, 2 cal",
                "Tea unsweetened - 0g carbs, 2 cal"
        };
        JComboBox<String> proteinDropdown = Create_combobox(proteins, 30, 400, 300, 600, 100);
        JComboBox<String> carbsDropdown = Create_combobox(carbs, 30, 400, 425, 600, 100);
        JComboBox<String> snackDropdown = Create_combobox(snacks, 30, 400, 550, 600, 100);
        JComboBox<String> drinksDropdown = Create_combobox(drinks, 30, 400, 675, 600, 100);

        CalorieTracker calorieTracker = new CalorieTracker(proteinLabel, carbsLabel, fatsLabel, caloriesLabel, proteinDropdown, carbsDropdown, snackDropdown, drinksDropdown, reset, main_label, limiter);

        panel.add(proteinLabel);
        panel.add(carbsLabel);
        panel.add(fatsLabel);
        panel.add(caloriesLabel);
        panel.add(proteinDropdown);
        panel.add(carbsDropdown);
        panel.add(snackDropdown);
        panel.add(drinksDropdown);
        panel.add(reset);
        panel.add(main_label);
        panel.add(limiter);
        panel.add(arnoldButton);
        return panel;
    }

    public JPanel createBankai() throws MalformedURLException {
        Bankai bankai = new Bankai("https://static.wikia.nocookie.net/all-worlds-alliance/images/0/0e/Byakuya_kuchiki_render_2_by_slenderwood_dab0fgm-pre.png/revision/latest?cb=20190226022706", 1500);
        JButton returnButton = new JButton("Return to Main Menu");
        returnButton.setFont(new Font("Arial", Font.HANGING_BASELINE, 60));
        returnButton.setBackground(Color.BLACK);
        returnButton.setForeground(Color.WHITE);
        returnButton.setBounds(0, 1000, 2000, 100);
        returnButton.setFocusPainted(false);

        returnButton.addActionListener(e -> {
            cardLayout.show(mainPanel, "MainMenu");
        });
        JLabel taskLabel = new JLabel("Bankai: Senbonzakura Kageyoshi");
        taskLabel.setFont(new Font("Arial", Font.HANGING_BASELINE, 80));
        taskLabel.setBackground(Color.BLACK);
        taskLabel.setOpaque(true);
        taskLabel.setForeground(Color.WHITE);
        taskLabel.setBounds(0, 0, 2000, 100);
        taskLabel.setHorizontalAlignment(SwingConstants.CENTER);
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());

        panel.add(bankai, BorderLayout.CENTER);
        panel.add(taskLabel, BorderLayout.NORTH);
        panel.add(returnButton, BorderLayout.SOUTH);
        bankai.setOpaque(false);
        panel.setBackground(Color.BLACK);
        return panel;
    }

    public JPanel createCookieClicker() throws MalformedURLException {

        JLabel cookies = Create_label("Cookies: ", 50, 250, 100, 1200, 100);
        cookies.setBackground(Color.ORANGE);
        JButton cookie = Create_button("", 1, 100, 300, 500, 500, 0, 0, 0);
        JTextField name = new JTextField("Account name");
        name.setBounds(200, 830, 500, 100);
        name.setFont(new Font("Arial", Font.HANGING_BASELINE, 50));
        name.setOpaque(true);
        name.setBackground(Color.ORANGE);
        name.setForeground(Color.WHITE);
        String[] upgrades = {
                "Upgrades","Cursor","Grandma","Farm","Mine","Factory","Bank"
        };

        JComboBox<String> upgrades_box = Create_combobox(upgrades,50, 800, 300,500,100);
        CookieClicker clicker = new CookieClicker(cookie, upgrades_box, cookies, name);
        String[] upgrades2 = {"Upgrades", "Cursor", "Grandma", "Farm", "Mine", "Factory", "Bank"};
        upgrades_box.setModel(upgrades2[]);
        URL cookie_url = new URL("https://cdn-icons-png.flaticon.com/512/614/614180.png");
        ImageIcon cookie_icon = new ImageIcon(cookie_url);
        cookie.setIcon(cookie_icon);
        cookie.setOpaque(false);
        cookie.setBorderPainted(false);
        cookie.setContentAreaFilled(false);
        upgrades_box.setBackground(Color.ORANGE);
        JPanel panel = createPanel("Cookie Clicker", 6);
        panel.add(cookies);
        panel.add(cookie);
        panel.add(upgrades_box);
        panel.add(name);
        return panel;
    }

    public JButton Create_button(String name, int font_size, int xstart, int ystart, int width, int length, int red, int green, int blue) {
        JButton button = new JButton(name);
        button.setFont(new Font("Arial", Font.HANGING_BASELINE, font_size));
        button.setOpaque(true);
        button.setBackground(new Color(red, green, blue));
        button.setBounds(xstart, ystart, width, length);
        button.setHorizontalAlignment(SwingConstants.CENTER);
        button.setFocusPainted(false);
        button.setForeground(Color.WHITE);
        return button;
    }

    public JLabel Create_label(String name, int font_size, int xstart, int ystart, int width, int length) {
        JLabel label = new JLabel(name);
        label.setFont(new Font("Arial", Font.HANGING_BASELINE, font_size));
        label.setOpaque(true);
        label.setBackground(new Color(63, 81, 181));
        label.setBounds(xstart, ystart, width, length);
        label.setHorizontalAlignment(SwingConstants.CENTER);
        label.setForeground(Color.WHITE);
        return label;
    }

    public JComboBox<String> Create_combobox(String[] items, int font_size, int xstart, int ystart, int width, int length) {
        JComboBox<String> comboBox = new JComboBox<>(items);
        comboBox.setFont(new Font("Arial", Font.PLAIN, font_size));
        comboBox.setBounds(xstart, ystart, width, length);
        comboBox.setOpaque(true);
        comboBox.setBackground(new Color(12, 200, 200));
        comboBox.setForeground(Color.WHITE);
        comboBox.setFocusable(false);
        return comboBox;
    }

    public JPanel createPanel(String title, int panelNumber) {
        JPanel panel = new JPanel();
        panel.setLayout(null);

        JButton returnButton = new JButton("Return to Main Menu");
        returnButton.setFont(new Font("Arial", Font.HANGING_BASELINE, 60));
        returnButton.setBackground(new Color(255, 255, 255));
        returnButton.setForeground(Color.BLACK);
        returnButton.setBounds(0, 1000, 2000, 150);
        returnButton.setFocusPainted(false);

        returnButton.addActionListener(e -> {
            cardLayout.show(mainPanel, "MainMenu");
        });

        panel.add(returnButton);

        JLabel taskLabel = new JLabel(title);
        taskLabel.setFont(new Font("Arial", Font.HANGING_BASELINE, 80));
        taskLabel.setBackground(new Color(255, 255, 255));
        taskLabel.setOpaque(true);
        taskLabel.setForeground(Color.BLACK);
        taskLabel.setBounds(0, 0, 2000, 100);
        taskLabel.setHorizontalAlignment(SwingConstants.CENTER);

        panel.add(taskLabel);
        panel.setBackground(new Color(45, 45, 45));

        return panel;
    }
}
