import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class Main {
    private JFrame frame;
    private CardLayout cardLayout;
    private JPanel mainPanel;

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> new Main().createGUI()); //don't understand how this works, I stole someone else's code a little bit
    }

    public void createGUI() {
        // Set up the main frame
        frame = new JFrame("Phone clock app");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE); // shuts down the program when you close the window
        frame.setSize(2040, 1160); //I am too lazy to look up the resolution
        frame.setLocationRelativeTo(null); // Setting the relative location to null centers it, I don't know how I can center it on other places for now


        // Creating the card Layout ( the best skill ) + setting the main panel
        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);

        // Naming and ordering of different panels
        JPanel mainMenuPanel = createMainMenuPanel();
        JPanel panel1 = createPanel("Countdown", 1);
        JPanel panel2 = createPanel("Stopwatch", 2);
        JPanel panel3 = createPanel("Alarm Clock", 3);
        JPanel panel4 = createPanel("Date Reminder", 4);
        JPanel panel5 = createPanel("Time", 5);
        JPanel panel6 = createPanel("Click Counter", 6);

        // Add all panels to the main panel using CardLayout, including the main menu panel
        mainPanel.add(mainMenuPanel, "MainMenu");
        mainPanel.add(panel1, "Panel1");
        mainPanel.add(panel2, "Panel2");
        mainPanel.add(panel3, "Panel3");
        mainPanel.add(panel4, "Panel4");
        mainPanel.add(panel5, "Panel5");
        mainPanel.add(panel6, "Panel6");

        // CardLayout is used to switch between panels
        // Set the initial panel to be the main menu, I debated putting the clock as the main screen, but the menu looks cleaner
        cardLayout.show(mainPanel, "MainMenu");

        frame.add(mainPanel);
        frame.setVisible(true);
    }
    // method for creating the MainMenu
    public JPanel createMainMenuPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(2, 5, 20, 20)); // 5 columns with spacing
        panel.setBackground(new Color(30, 30, 30)); // Dark background for the menu

        // Defining the icons + the number of icons determines the number of windows, putting them in a String makes it more efficient
        String[] iconPaths = {
            "H:\\Countdown.png", "H:\\Timer.png", "H:\\Alarm clock.png", "H:\\Calendar.png", "H:\\Clock.png", "H:\\Cookie.png"
        };

        // Creating buttons with icons
        for (int i = 0; i < iconPaths.length; i++) {
            ImageIcon icon = new ImageIcon(iconPaths[i]);
            JButton button = new JButton(icon);
            button.setPreferredSize(new Dimension(60, 60)); // Set button size
            int panelNumber = i + 1; // Panel numbers: 1, 2, 3, 4, 5

            // Switching to the panels depending on the icon clicked, it changes the main panel depending 
            button.addActionListener(e -> {
                cardLayout.show(mainPanel, "Panel" + panelNumber);
            });

            // Hovering effects and coloring
            button.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    button.setBackground(new Color(120, 120, 120)); //background of a button as you hover over it (a bit brighter than the rest
                }

                public void mouseExited(java.awt.event.MouseEvent evt) {
                    button.setBackground(new Color(60, 60, 60)); // background of button after it has been hovered over
                }
            });

            // Stilizing the button
            button.setBackground(new Color(60, 60, 60)); // Set background of button
            button.setBorder(BorderFactory.createEmptyBorder());
            button.setFocusPainted(false);
            panel.add(button);
        }

        return panel;
    }

    // Creates a simple panel with a title and a return button
    public JPanel createPanel(String title, int panelNumber) {
        JPanel panel = new JPanel();
        panel.setLayout(new BorderLayout());

        // Create the return button
        JButton returnButton = new JButton("Return to Main Menu");
        returnButton.setFont(new Font("Arial", Font.HANGING_BASELINE, 60));
        returnButton.setBackground(new Color(255, 255, 255)); // Red return button
        returnButton.setForeground(Color.BLACK);
        returnButton.setFocusPainted(false);

        returnButton.addActionListener(e -> {
            // Go back to the main menu
            cardLayout.show(mainPanel, "MainMenu");
        });

        // Add return button at the bottom of the panel
        panel.add(returnButton, BorderLayout.SOUTH);

        // Add task button to simulate some task (e.g., executing code)
        JPanel info = new JPanel();
        JLabel taskLabel = new JLabel(title);
        taskLabel.setFont(new Font("Arial", Font.HANGING_BASELINE, 80));
        taskLabel.setBackground(new Color(30, 30, 255));
        taskLabel.setForeground(Color.BLACK);
        info.add(taskLabel);
        panel.add(info, BorderLayout.NORTH);

        // Set background color of each task panel
        panel.setBackground(new Color(45, 45, 45));

        return panel;
    }
}
