import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.net.MalformedURLException;
import java.net.URL;
import java.text.NumberFormat;
import java.text.ParseException;
import static java.lang.Double.parseDouble;

class TimerPanel {
    private Timer timer;
    private int timeLeft;
    private JLabel countdownLabel;
    private JButton startButton, stopButton, resetButton;
    private JComboBox<String> timeSelector;

    public TimerPanel(JLabel countdownLabel, JButton startButton, JButton stopButton, JButton resetButton, JComboBox<String> timeSelector) {
        this.countdownLabel = countdownLabel;
        this.startButton = startButton;
        this.stopButton = stopButton;
        this.resetButton = resetButton;
        this.timeSelector = timeSelector;
        this.timeLeft = 0;

        timer = new Timer(1000, e -> updateCountdown());

        startButton.addActionListener(e -> startCountdown());
        stopButton.addActionListener(e -> stopCountdown());
        resetButton.addActionListener(e -> resetCountdown());
    }

    private void startCountdown() {
        if (!timer.isRunning()) {
            if (timeLeft == 0) {
                String selectedTime = (String) timeSelector.getSelectedItem();
                timeLeft = parseTime(selectedTime);
                countdownLabel.setText(selectedTime);
            }
            timer.start();
        }
    }

    private void stopCountdown() {
        timer.stop();
    }

    private void resetCountdown() {
        timer.stop();
        timeLeft = 0;
        countdownLabel.setText((String) timeSelector.getSelectedItem());
    }

    private void updateCountdown() {
        if (timeLeft > 0) {
            timeLeft--;
            countdownLabel.setText(formatTime(timeLeft));
        } else {
            timer.stop();
            countdownLabel.setText((String) timeSelector.getSelectedItem());
        }
    }
    // method for taking the string within the label and turning it into seconds
    private int parseTime(String time) {
        String[] parts = time.split(":");
        int minutes = Integer.parseInt(parts[0]);
        int seconds = Integer.parseInt(parts[1]);
        return minutes * 60 + seconds;
    }

    private String formatTime(int totalSeconds) {
        int minutes = totalSeconds / 60;
        int seconds = totalSeconds % 60;
        return String.format("%02d:%02d", minutes, seconds);
    }
}
class StopwatchPanel {
    private int time_stopwatch;
    private JLabel stopwatchLabel, flagLabel;
    private JButton startButton, stopButton, resetButton, flagButton;
    private Timer timer;

    public StopwatchPanel(JLabel stopwatchLabel, JLabel flagLabel, JButton startButton, JButton stopButton, JButton resetButton, JButton flagButton) {
        this.stopwatchLabel = stopwatchLabel;
        this.flagLabel = flagLabel;
        this.startButton = startButton;
        this.stopButton = stopButton;
        this.resetButton = resetButton;
        this.flagButton = flagButton;
        this.time_stopwatch = 0;
        timer = new Timer(1000, e -> updateCountdown());

        startButton.addActionListener(e -> start_stopwatch());
        stopButton.addActionListener(e -> stop_stopwatch());
        resetButton.addActionListener(e -> resetCountdown());
        flagButton.addActionListener(e -> flag_countdown());
    }

    private void start_stopwatch() {
        timer.start();
    }
    private void stop_stopwatch(){
        timer.stop();
    }
    private void resetCountdown(){
        timer.stop();
        time_stopwatch = 0;
        stopwatchLabel.setText("00:00");
        flagLabel.setText("00:00");
    }
    private void updateCountdown() {
        if (time_stopwatch >= 0) {
            time_stopwatch++;
            stopwatchLabel.setText(formatTime(time_stopwatch));
        }
    }
    private void flag_countdown(){
        flagLabel.setText(stopwatchLabel.getText());
    }
    public String formatTime(int totalSeconds) {
        int minutes = totalSeconds / 60;
        int seconds = totalSeconds % 60;
        return String.format("%02d:%02d", minutes, seconds);
    }
}
class FitnessTracker {
    private int reps;
    private int sets;
    private double caloriesBurned;
    private int repsLimit;
    private String exercise;
    private JLabel sets_label, reps_label, calories_label, main_label;
    private JButton addRep, reset_tracker;
    private JComboBox reps_in_set, exercises;
    private String selectedExercise;
    private double cals_pe = 1;
    private String encouragement;
    private JTextField calories_goal;
    private double goal;
    public FitnessTracker(JLabel sets_label, JLabel reps_label, JLabel calories_label, JButton addRep,JButton reset_tracker, JComboBox reps_in_set, JComboBox exercises, JLabel main_label, JTextField calories_goal) {
        this.sets_label = sets_label;
        this.reps_label = reps_label;
        this.calories_label = calories_label;
        this.addRep = addRep;
        this.reps_in_set = reps_in_set;
        this.exercises = exercises;
        this.reset_tracker = reset_tracker;
        this.reps = 0;
        this.sets = 0;
        this.caloriesBurned = 0;
        this.repsLimit = 10;
        this.main_label = main_label;
        this.calories_goal = calories_goal;
        parseCalorieGoal();
        addRep.addActionListener(e -> {
            incrementReps(cals_pe);
            sets_label.setText("Sets: " + getSets());
            reps_label.setText("Reps: " + getReps());
            calories_label.setText("Calories: " + getCaloriesBurned());
            parseCalorieGoal();
        });
        reps_in_set.addActionListener(e -> {
            String selectedRegime = (String) reps_in_set.getSelectedItem();
            setRepsLimit(Integer.parseInt(selectedRegime));
        });
        exercises.addActionListener(e -> {
             selectedExercise = (String) exercises.getSelectedItem();
             chooseExercise();
        });
        reset_tracker.addActionListener(e ->{
            resetTracker();
            sets_label.setText("Sets: 0");
            reps_label.setText("Reps: 0");
            calories_label.setText("Calories: 0");
        });

    }
    private void parseCalorieGoal() {
        try {
            goal = Double.parseDouble(calories_goal.getText());
        } catch (NumberFormatException e) {
            goal = 0;
        }
    }
    public void chooseExercise(){
        switch (selectedExercise){
            case "Squats":
                cals_pe = 2.5;
            break;
            case "Push-ups":
                cals_pe = 2;
            break;
            case "Pull-ups":
                cals_pe = 3;
            break;
            case "Dips":
                cals_pe = 3;
            break;
            case "Bench-press":
                cals_pe = 4;
            break;
            default:
                cals_pe = 2;
        }
    }
    public String choose_encouragement(){
        int courage = (int) Math.floor(Math.random()*5);
        if(goal<caloriesBurned){
            return encouragement = "You did it Buddy, you can rest today!";
        }
        return switch (courage) {
            case 1 -> encouragement = "Doing great!";
            case 2 -> encouragement = "Light work buddy!";
            case 3 -> encouragement = "Another set young one";
            case 4 -> encouragement = "Those calories ain't burning themselves";
            case 5 -> encouragement = "Sacrifice yourself for the gain";
            default -> encouragement = "Let's get going!";
        };

    }
    public void incrementReps(double calories) {
        reps++;
        caloriesBurned += calories;
        if (reps >= repsLimit) {
            reps = 0;
            sets++;
            main_label.setText(choose_encouragement());
        }
    }

    public void setRepsLimit(int repsLimit) {
        this.repsLimit = repsLimit;
    }

    public int getReps() {
        return reps;
    }

    public int getSets() {
        return sets;
    }

    public double getCaloriesBurned() {
        return caloriesBurned;
    }

    public void resetTracker() {
        this.reps = 0;
        this.sets = 0;
        this.caloriesBurned = 0;
        goal = 0;
        main_label.setText("Select a calorie goal and let's train!");
        calories_goal.setText("Calorie goal");
    }
}
class CalorieTracker {
    private int caloriesConsumed;
    private int protein;
    private int carbs;
    private int fats;

    public CalorieTracker() {
        this.caloriesConsumed = 0;
        this.protein = 0;
        this.carbs = 0;
        this.fats = 0;
    }

    public void addMacros(int protein, int carbs, int fats, int calories) {
        this.protein += protein;
        this.carbs += carbs;
        this.fats += fats;
        this.caloriesConsumed += calories;
    }

    public int getProtein() {
        return protein;
    }

    public int getCarbs() {
        return carbs;
    }

    public int getFats() {
        return fats;
    }

    public int getCaloriesConsumed() {
        return caloriesConsumed;
    }

    public void resetTracker() {
        this.caloriesConsumed = 0;
        this.protein = 0;
        this.carbs = 0;
        this.fats = 0;
    }
}
public class Main {
    private JFrame frame;
    private CardLayout cardLayout;
    private JPanel mainPanel;

    public static void main(String[] args) throws MalformedURLException {
        new Main().createGUI();
    }
    // the GUI is the main component of the Main class, since the cardLayout and JPanels have to bo defined for the entire class, not individual methods
    public void createGUI() throws MalformedURLException {
        frame = new JFrame("Phone Clock App");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(2040, 1160);
        frame.setLocationRelativeTo(null);

        cardLayout = new CardLayout();
        mainPanel = new JPanel(cardLayout);

        JPanel mainMenuPanel = createMainMenuPanel();
        JPanel countdownPanel = createCountdownPanel();
        JPanel panel2 = createStopwatchPanel();
        JPanel panel3 = createFitnessTrackerPanel();
        JPanel panel4 = createCalorieTrackerPanel();
        JPanel panel5 = createPanel("Dino game", 5);
        JPanel panel6 = createPanel("Click Counter", 6);

        mainPanel.add(mainMenuPanel, "MainMenu");
        mainPanel.add(countdownPanel, "Panel1");
        mainPanel.add(panel2, "Panel2");
        mainPanel.add(panel3, "Panel3");
        mainPanel.add(panel4, "Panel4");
        mainPanel.add(panel5, "Panel5");
        mainPanel.add(panel6, "Panel6");

        cardLayout.show(mainPanel, "MainMenu");

        frame.add(mainPanel);
        frame.setVisible(true);
    }

    public JPanel createMainMenuPanel() {
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(2, 5, 20, 20));
        panel.setBackground(new Color(30, 30, 30));

        URL[] iconURLs = null;
        try {
            iconURLs = new URL[]{
                    new URL("https://cdn-icons-png.flaticon.com/512/4893/4893024.png"), // Online URL
                    new URL("https://cdn-icons-png.flaticon.com/512/3003/3003202.png"), // Local file paths use "file:///" prefix
                    new URL("https://cdn-icons-png.flaticon.com/512/6750/6750831.png"), // Replace spaces with "%20"
                    new URL("https://cdn-icons-png.flaticon.com/512/2058/2058065.png"),
                    new URL("https://cdn-icons-png.flaticon.com/512/8337/8337182.png"),
                    new URL("https://cdn-icons-png.flaticon.com/512/614/614180.png")
            };
        } catch (MalformedURLException e) {
            throw new RuntimeException(e);
        }

        for (int i = 0; i < iconURLs.length; i++) {
            ImageIcon icon = new ImageIcon(iconURLs[i]);
            JButton button = new JButton(icon);
            button.setPreferredSize(new Dimension(60, 60));
            int panelNumber = i + 1;

            button.addActionListener(e -> {
                cardLayout.show(mainPanel, "Panel" + panelNumber);
            });

            button.addMouseListener(new java.awt.event.MouseAdapter() {
                public void mouseEntered(java.awt.event.MouseEvent evt) {
                    button.setBackground(new Color(120, 120, 120));
                }

                public void mouseExited(java.awt.event.MouseEvent evt) {
                    button.setBackground(new Color(60, 60, 60));
                }
            });

            button.setBackground(new Color(60, 60, 60));
            button.setBorder(BorderFactory.createEmptyBorder());
            button.setFocusPainted(false);
            panel.add(button);
        }

        return panel;
    }

    public JPanel createCountdownPanel() {
        JPanel panel1 = createPanel("Countdown", 1);
        JLabel countdown = Create_label("00:00", 200, 530, 125, 900, 400);
        JButton start = Create_button("Start", 50, 530, 550, 400, 80, 12, 200, 12);
        JButton stop = Create_button("Stop", 50, 1020, 550, 400, 80, 200, 12, 12);
        JButton reset = Create_button("Reset", 50, 1020, 655, 400, 80, 200, 200, 100);

        String[] timelines = {
                "01:00", "02:00", "05:00", "10:00"
        };
        JComboBox<String> comboBox = Create_combobox(timelines, 45, 530, 655, 400, 80);

        panel1.add(countdown);
        panel1.add(start);
        panel1.add(stop);
        panel1.add(reset);
        panel1.add(comboBox);

        // Initialize TimerPanel logic
        new TimerPanel(countdown, start, stop, reset, comboBox);

        return panel1;
    }

    public JPanel createStopwatchPanel() {
        JPanel panel2 = createPanel("Stopwatch", 2);
        JLabel countdown_stop = Create_label("00:00", 200, 530, 125, 900, 400);
        JButton start_stop = Create_button("Start", 50, 530, 550, 400, 80, 12, 200, 12);
        JButton stop_stop = Create_button("Stop", 50, 1020, 550, 400, 80, 200, 12, 12);
        JButton reset_stop = Create_button("Reset", 50, 1020, 655, 400, 80, 200, 200, 12);
        JButton flag_stop = Create_button("Flag", 50, 530, 655, 400, 80, 12, 155, 155);
        JLabel flag_time = Create_label("00:00", 100, 530, 760, 900, 200);
        panel2.add(countdown_stop);
        panel2.add(start_stop);
        panel2.add(stop_stop);
        panel2.add(reset_stop);
        panel2.add(flag_stop);
        panel2.add(flag_time);
        new StopwatchPanel(countdown_stop, flag_time, start_stop, stop_stop, reset_stop, flag_stop);
        return panel2;
    }

    public JPanel createFitnessTrackerPanel() throws MalformedURLException {
        JPanel panel = createPanel("Fitness Tracker", 3);

        JLabel setsLabel = Create_label("Sets: 0", 50, 50, 300, 500, 100);
        JLabel repsLabel = Create_label("Reps: 0", 50, 50, 425, 500, 100);
        JLabel caloriesLabel = Create_label("Calories: 0", 50, 50, 550, 500, 100);
        JLabel main_label = Create_label("Select a calorie goal and let's train!", 80, 300, 100, 1400, 150);
        JButton repButton = Create_button("Add Rep", 50, 50, 675, 400, 100, 50, 200, 50);
        JButton resetTracker = Create_button("Reset", 50, 50, 800, 400, 100, 50, 200, 50);
        JComboBox<String> regimeSelector = Create_combobox(new String[]{"Reps in a set","6", "8", "10", "12", "14"}, 50, 650, 300, 500, 100);
        URL ronnieURL = new URL("https://media3.giphy.com/media/nIDFKbfyUx68r7bTEb/giphy.gif?cid=6c09b952jngtv4p9xmotgj69lcojhre3ccz7gwnb7aades4h&ep=v1_internal_gif_by_id&rid=giphy.gif&ct=s");
        JTextField calorie_goal = new JTextField("Calorie Goal");
        calorie_goal.setBounds(650,550,500,100);
        calorie_goal.setFont(new Font("Arial", Font.HANGING_BASELINE, 50));
        calorie_goal.setOpaque(true);
        calorie_goal.setBackground(new Color(63, 81, 181));
        calorie_goal.setForeground(Color.WHITE);
        ImageIcon ronnieIcon = new ImageIcon(ronnieURL);
        JButton ronnieButton = Create_button("Ronnie Coleman", 40, 1200, 150, 850, 700, 50, 200, 50);
        ronnieButton.setIcon(ronnieIcon);
        ronnieButton.setBorderPainted(false);
        ronnieButton.setContentAreaFilled(false);
        ronnieButton.setOpaque(false);
        ronnieButton.setForeground(Color.YELLOW);
        JComboBox<String> exercises = Create_combobox(new String[]{"Exercise","Squats", "Push-ups", "Pull-ups", "Dips", "Bench-press"}, 50, 650, 425, 500, 100);
        FitnessTracker fitnessTracker = new FitnessTracker(setsLabel, repsLabel, caloriesLabel ,repButton,resetTracker,regimeSelector,exercises, main_label, calorie_goal);

        panel.add(setsLabel);
        panel.add(repsLabel);
        panel.add(caloriesLabel);
        panel.add(repButton);
        panel.add(regimeSelector);
        panel.add(resetTracker);
        panel.add(exercises);
        panel.add(main_label);
        panel.add(ronnieButton);
        panel.add(calorie_goal);
        return panel;
    }

    public JPanel createCalorieTrackerPanel() {
        JPanel panel = createPanel("Calorie Counter", 4);

        JLabel proteinLabel = Create_label("Protein: 0g", 40, 50, 200, 300, 80);
        JLabel carbsLabel = Create_label("Carbs: 0g", 40, 50, 300, 300, 80);
        JLabel fatsLabel = Create_label("Fats: 0g", 40, 50, 400, 300, 80);
        JLabel caloriesLabel = Create_label("Calories: 0", 40, 50, 500, 300, 80);

        JComboBox<String> proteinDropdown = Create_combobox(new String[]{"Chicken - 30g protein, 150 cal", "Eggs - 12g protein, 70 cal"}, 25, 400, 200, 600, 50);
        JComboBox<String> carbsDropdown = Create_combobox(new String[]{"Rice - 40g carbs, 200 cal", "Bread - 20g carbs, 120 cal"}, 25, 400, 300, 600, 50);
        JComboBox<String> snackDropdown = Create_combobox(new String[]{"Chips - 10g fat, 150 cal", "Chocolate - 15g fat, 250 cal"}, 25, 400, 400, 600, 50);

        CalorieTracker calorieTracker = new CalorieTracker();

        proteinDropdown.addActionListener(e -> {
            String selectedItem = (String) proteinDropdown.getSelectedItem();
            if (selectedItem.contains("Chicken")) {
                calorieTracker.addMacros(30, 0, 0, 150);
            } else if (selectedItem.contains("Eggs")) {
                calorieTracker.addMacros(12, 0, 0, 70);
            }
            updateCalorieLabels(calorieTracker, proteinLabel, carbsLabel, fatsLabel, caloriesLabel);
        });

        carbsDropdown.addActionListener(e -> {
            String selectedItem = (String) carbsDropdown.getSelectedItem();
            if (selectedItem.contains("Rice")) {
                calorieTracker.addMacros(0, 40, 0, 200);
            } else if (selectedItem.contains("Bread")) {
                calorieTracker.addMacros(0, 20, 0, 120);
            }
            updateCalorieLabels(calorieTracker, proteinLabel, carbsLabel, fatsLabel, caloriesLabel);
        });

        snackDropdown.addActionListener(e -> {
            String selectedItem = (String) snackDropdown.getSelectedItem();
            if (selectedItem.contains("Chips")) {
                calorieTracker.addMacros(0, 0, 10, 150);
            } else if (selectedItem.contains("Chocolate")) {
                calorieTracker.addMacros(0, 0, 15, 250);
            }
            updateCalorieLabels(calorieTracker, proteinLabel, carbsLabel, fatsLabel, caloriesLabel);
        });

        panel.add(proteinLabel);
        panel.add(carbsLabel);
        panel.add(fatsLabel);
        panel.add(caloriesLabel);
        panel.add(proteinDropdown);
        panel.add(carbsDropdown);
        panel.add(snackDropdown);

        return panel;
    }

    private void updateCalorieLabels(CalorieTracker tracker, JLabel proteinLabel, JLabel carbsLabel, JLabel fatsLabel, JLabel caloriesLabel) {
        proteinLabel.setText("Protein: " + tracker.getProtein() + "g");
        carbsLabel.setText("Carbs: " + tracker.getCarbs() + "g");
        fatsLabel.setText("Fats: " + tracker.getFats() + "g");
        caloriesLabel.setText("Calories: " + tracker.getCaloriesConsumed());
    }

    public JButton Create_button(String name, int font_size, int xstart, int ystart, int width, int length, int red, int green, int blue) {
        JButton button = new JButton(name);
        button.setFont(new Font("Arial", Font.HANGING_BASELINE, font_size));
        button.setOpaque(true);
        button.setBackground(new Color(red, green, blue));
        button.setBounds(xstart, ystart, width, length);
        button.setHorizontalAlignment(SwingConstants.CENTER);
        button.setFocusPainted(false);
        button.setForeground(Color.WHITE);
        return button;
    }

    public JLabel Create_label(String name, int font_size, int xstart, int ystart, int width, int length) {
        JLabel label = new JLabel(name);
        label.setFont(new Font("Arial", Font.HANGING_BASELINE, font_size));
        label.setOpaque(true);
        label.setBackground(new Color(63, 81, 181));
        label.setBounds(xstart, ystart, width, length);
        label.setHorizontalAlignment(SwingConstants.CENTER);
        label.setForeground(Color.WHITE);
        return label;
    }

    public JComboBox<String> Create_combobox(String[] items, int font_size, int xstart, int ystart, int width, int length) {
        JComboBox<String> comboBox = new JComboBox<>(items);
        comboBox.setFont(new Font("Arial", Font.PLAIN, font_size));
        comboBox.setBounds(xstart, ystart, width, length);
        comboBox.setOpaque(true);
        comboBox.setBackground(new Color(12, 200, 200));
        comboBox.setForeground(Color.WHITE);
        comboBox.setFocusable(false);
        return comboBox;
    }

    public JPanel createPanel(String title, int panelNumber) {
        JPanel panel = new JPanel();
        panel.setLayout(null);

        JButton returnButton = new JButton("Return to Main Menu");
        returnButton.setFont(new Font("Arial", Font.HANGING_BASELINE, 60));
        returnButton.setBackground(new Color(255, 255, 255));
        returnButton.setForeground(Color.BLACK);
        returnButton.setBounds(0, 1000, 2000, 100);
        returnButton.setFocusPainted(false);

        returnButton.addActionListener(e -> {
            cardLayout.show(mainPanel, "MainMenu");
        });

        panel.add(returnButton);

        JLabel taskLabel = new JLabel(title);
        taskLabel.setFont(new Font("Arial", Font.HANGING_BASELINE, 80));
        taskLabel.setBackground(new Color(255, 255, 255));
        taskLabel.setOpaque(true);
        taskLabel.setForeground(Color.BLACK);
        taskLabel.setBounds(0, 0, 2000, 100);
        taskLabel.setHorizontalAlignment(SwingConstants.CENTER);

        panel.add(taskLabel);
        panel.setBackground(new Color(45, 45, 45));

        return panel;
    }
}
