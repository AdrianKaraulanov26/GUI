import java.awt.*;
import java.io.*;
import java.time.LocalDateTime;
import java.util.*;
import javax.swing.*;
import javax.swing.border.*;
import javax.swing.table.*;

public class Main {
    //HAHHAHHAHAAAA, TIME TO WRITE COMMENTSSSSSSSSSSSSSSSSsss
    //Well first we have a lot of static variables, so I can access and set them in methods.
    public static JFrame frame;
    public static ArrayList<Items> items = new ArrayList<>();
    public static DefaultTableModel itemsTableModel;
    public static DefaultTableModel cartTableModel;
    public static JTextField moneyField;
    public static JTextField changeField;
    public static JTextField totalField;
    public static JPasswordField passwordField;
    public static JPanel adminPanel;
    public static JTextField itemNameField, itemPriceField, itemCategoryField, itemQuantityField, itemCodeField, customerIdField, registerCustomerID, registerCustomerName, registerEmployeeID, registerEmployeeName, registerEmployeeBaseSalary, employeeIDField, printEmployeeReport;
    public static int currentTotal = 0;
    public static JButton searchButton;
    public static JTextField searchField;
    public static JTable itemsTable;
    private static ArrayList<Customer> customers = new ArrayList<>();
    private static ArrayList<Employee> employees = new ArrayList<>();
    private static Customer Currentcustomer;
    private static Employee Currentemployee;
    private static Employee reportEmp;
    // Um.... colors :)
    private static final Color PRIMARY_COLOR = new Color(0, 102, 204);
    private static final Color SECONDARY_COLOR = new Color(240, 240, 240);
    private static final Color ACCENT_COLOR = new Color(255, 153, 0);
    private static final Color SUCCESS_COLOR = new Color(0, 153, 51);

    private static JPanel createPanel(String title) {
        //method for creating a panel, not the most exciting thing
        JPanel panel = new JPanel(new BorderLayout(10, 10));
        panel.setBorder(new CompoundBorder(
                new TitledBorder(title),
                new EmptyBorder(10, 10, 10, 10))
        );
        panel.setBackground(Color.WHITE);
        return panel;
    }

    private static JTable createStyledTable(DefaultTableModel model) {
        //once again not the most exciting thing, but it's necessary
        JTable table = new JTable(model);
        table.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        table.setRowHeight(25);
        table.setSelectionBackground(ACCENT_COLOR.brighter());
        table.setSelectionForeground(Color.BLACK);
        table.setGridColor(new Color(220, 220, 220));

        JTableHeader header = table.getTableHeader();
        header.setFont(new Font("Segoe UI", Font.BOLD, 14));
        header.setBackground(PRIMARY_COLOR);
        header.setForeground(Color.WHITE);

        return table;
    }

    private static JButton createStyledButton(String text, Color bgColor) {
        //another helper
        JButton button = new JButton(text);
        button.setFont(new Font("Segoe UI", Font.BOLD, 14));
        button.setBackground(bgColor);
        button.setForeground(Color.WHITE);
        button.setFocusPainted(false);
        button.setBorder(new EmptyBorder(10, 15, 10, 15));
        button.setCursor(new Cursor(Cursor.HAND_CURSOR));
        return button;
    }

    private static JLabel createBoldLabel(String text) {
        // you guessed it, a helper
        JLabel label = new JLabel(text);
        label.setFont(new Font("Segoe UI", Font.BOLD, 14));
        label.setHorizontalAlignment(SwingConstants.RIGHT);
        return label;
    }

    private static JTextField createStyledTextField(String text, boolean editable) {
        // this one was cool since I learned that you can make fields uneditable to prevent manipulation of prices
        JTextField field = new JTextField(text);
        field.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        field.setEditable(editable);
        field.setBorder(BorderFactory.createCompoundBorder(
                BorderFactory.createLineBorder(new Color(200, 200, 200)),
                BorderFactory.createEmptyBorder(5, 5, 5, 5))
        );
        return field;
    }

    private static JTextField createAdminField(String labelText, int x, int y) {
        // helper methods yipeee
        JLabel label = new JLabel(labelText);
        label.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        label.setBounds(x, y, 250, 25);
        adminPanel.add(label);

        JTextField field = new JTextField();
        field.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        field.setBounds(x + 260, y, 200, 25);
        adminPanel.add(field);

        return field;
    }

    private static void sortItems() {
        // this is a new sorting algorithm for me
        Collections.sort(items, (item1, item2) -> {
            int codeCompare = item1.getCode().compareTo(item2.getCode());
            if (codeCompare != 0) return codeCompare;
            return item1.getName().compareTo(item2.getName());
        });
    }

    public static void updateItemsTable(String searchTerm) {
        //first we load the item arrays after deleting the previous details
        itemsTableModel.setRowCount(0);
        ArrayList<Items> matchedItems = new ArrayList<>();
        ArrayList<Items> otherItems = new ArrayList<>();
        //loading the items into the table
        if (searchTerm != null && !searchTerm.isEmpty()) {
            //searching and adding items based on searchTerm
            for (Items item : items) {
                if (item.getCode().toLowerCase().contains(searchTerm.toLowerCase()) ||
                        item.getName().toLowerCase().contains(searchTerm.toLowerCase())) {
                    matchedItems.add(item);
                } else {
                    otherItems.add(item);
                }
            }
        } else {
            otherItems.addAll(items);
        }
        //formating the items into the table formated as dollars
        for (Items item : matchedItems) {
            itemsTableModel.addRow(new Object[]{
                    item.getCode(),
                    item.getName(),
                    "$" + item.getPrice() / 100.0,
                    item.getCategory(),
                    item.getQuantity()
            });
        }
    // then adding any unmatched items
        for (Items item : otherItems) {
            itemsTableModel.addRow(new Object[]{
                    item.getCode(),
                    item.getName(),
                    "$" + item.getPrice() / 100.0,
                    item.getCategory(),
                    item.getQuantity()
            });
        }
    }

    public static void addOrUpdateItem() {
        try {
            //creating new item objects based on the given new data and adding it to the table
            String code = itemCodeField.getText();
            String name = itemNameField.getText();
            int price = (int) (Double.parseDouble(itemPriceField.getText()) * 100);
            int category = Integer.parseInt(itemCategoryField.getText());
            int quantity = Integer.parseInt(itemQuantityField.getText());

            for (Items item : items) {
                if (item.getCode().equals(code)) {
                    item.setName(name);
                    item.setPrice(price);
                    item.setCategory(category);
                    item.setQuantity(quantity);
                    sortItems();
                    updateItemsTable(null);
                    clearAdminFields();
                    JOptionPane.showMessageDialog(frame, "Item updated successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
                    return;
                }
            }

            items.add(new Items(name, price, category, quantity, code));
            sortItems();
            updateItemsTable(null);
            clearAdminFields();
            JOptionPane.showMessageDialog(frame, "Item added successfully!", "Success", JOptionPane.INFORMATION_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(frame, "Please enter valid numbers for price, category and quantity", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void loadItemsFromFile() {
        //reader method for loading items
        items.clear();
        try (BufferedReader reader = new BufferedReader(new FileReader("items.txt"))) {
            String line;
            while ((line = reader.readLine()) != null) {
                String[] parts = line.split(",");
                if (parts.length == 5) {
                    items.add(new Items(
                            parts[1],
                            Integer.parseInt(parts[2]),
                            Integer.parseInt(parts[3]),
                            Integer.parseInt(parts[4]),
                            parts[0]
                    ));
                }
            }
            sortItems();
            updateItemsTable(null);
        } catch (FileNotFoundException e) {
            //adding new default items if no items exist
            items.add(new Items("Apple", 100, 1, 10, "A001"));
            items.add(new Items("Banana", 50, 1, 15, "A002"));
            items.add(new Items("Milk", 200, 2, 5, "B001"));
            sortItems();
            saveItemsToFile();
            updateItemsTable(null);
            JOptionPane.showMessageDialog(frame, "Created new items file with default items", "Info", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Error loading items: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(frame, "Error parsing item data", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void addToCart(int selectedRow) {
        // selecting an item to be added ( if the row is valid of course )
        if (selectedRow >= 0 && selectedRow < itemsTableModel.getRowCount()) {
            String itemCode = (String) itemsTableModel.getValueAt(selectedRow, 0);
            Items item = null;
            //finding the item's object
            for (Items i : items) {
                if (i.getCode().equals(itemCode)) {
                    item = i;
                    break;
                }
            }
            // handkling empty object case and deleting it afterwards + appology message
            if (item != null) { //first we see if there is one such item
                if (item.getQuantity() <= 0) {
                    JOptionPane.showMessageDialog(frame, "Item out of stock!", "Error", JOptionPane.ERROR_MESSAGE);
                    items.remove(item);
                    JOptionPane.showMessageDialog(frame, "Sorry, we have fixed our supply error!", "Error", JOptionPane.ERROR_MESSAGE);
                    return;
                }
                //increasing the count if the item already exists in cart, then update stats as necessarily
                for (int i = 0; i < cartTableModel.getRowCount(); i++) {
                    if (cartTableModel.getValueAt(i, 0).equals(item.getName())) {
                        int qty = (int) cartTableModel.getValueAt(i, 2) + 1;
                        int total = item.getPrice() * qty;

                        cartTableModel.setValueAt(qty, i, 2);
                        cartTableModel.setValueAt("$" + (total / 100.0), i, 3);

                        item.setQuantity(item.getQuantity() - 1);
                        saveItemsToFile();
                        updateItemsTable(searchField.getText());
                        updateTotal();
                        return;
                    }
                }
            // add an item to the cart if it is unique compared to the rest
                cartTableModel.addRow(new Object[]{
                        item.getName(),
                        "$" + (item.getPrice() / 100.0),
                        1,
                        "$" + (item.getPrice() / 100.0)
                });
            //updating stats
                item.setQuantity(item.getQuantity() - 1);
                saveItemsToFile();
                updateItemsTable(searchField.getText());
                updateTotal();
            }
        }
    }

    public static void updateTotal() {
        //updating the field for the price
        currentTotal = 0;
        for (int i = 0; i < cartTableModel.getRowCount(); i++) {
            String totalStr = cartTableModel.getValueAt(i, 3).toString().substring(1);
            currentTotal += (int) (Double.parseDouble(totalStr) * 100);
        }
        totalField.setText(String.format("$%.2f", currentTotal / 100.0));
        // I hate string formats, but I like plagirising from https://www.w3schools.com/java/ref_string_format.asp
    }

    public static void calculateChange() {

        try {
            //getting the payed amount as a string without the $ then parsing it as a double and updating the info based on the given and total
            String moneyStr = moneyField.getText().replace("$", "");
            double given = Double.parseDouble(moneyStr) * 100;
            double change = given - currentTotal;
            //checking for shenanigans
            if (change < 0) {
                changeField.setText("$0.00");
                JOptionPane.showMessageDialog(frame, "Insufficient payment!", "Error", JOptionPane.ERROR_MESSAGE);
            } else {
                changeField.setText(String.format("$%.2f", change / 100.0));
            }
        } catch (NumberFormatException e) {
            JOptionPane.showMessageDialog(frame, "Please enter a valid amount", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void returnChange(String denomination) {
        //same thing with the upper method
        try {
            String changeStr = changeField.getText().replace("$", "");
            double change = Double.parseDouble(changeStr) * 100;
            if (change <= 0) {
                return;
            }
            //implementing logic for multiple change pieces, because employees can be stupid but computers can't
            double denomValue = Double.parseDouble(denomination.substring(1)) * 100;
            if (change >= denomValue) {
                int count = (int) (change / denomValue);
                //getting the max number
                change = change % denomValue;
                changeField.setText(String.format("$%.2f", change / 100.0));
                //displaying the return
                JOptionPane.showMessageDialog(frame, "Give " + count + " of " + denomination, "Change", JOptionPane.INFORMATION_MESSAGE);
            }
        } catch (NumberFormatException e) {
        }
    }

    public static void toggleAdminPanel() {
        //really fun thing I learned because of the project, locked fields are cool af
        String password = new String(passwordField.getPassword());
        if ("porcusini cocosini".equals(password)) {
            //setting the panels visible can make a fun game if you ask me
            adminPanel.setVisible(!adminPanel.isVisible());
            passwordField.setText("");
            frame.revalidate();
            //have to implement a closing feature but I am currently writing documentation and I am lazy
        } else {
            JOptionPane.showMessageDialog(frame, "Incorrect password!", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void clearAdminFields() {
        //ok this one is intuitive, but only works for items, I need to update my code to be more readable as below it gets a bit spagetti like, but I got excited, sorry
        itemCodeField.setText("");
        itemNameField.setText("");
        itemPriceField.setText("");
        itemCategoryField.setText("");
        itemQuantityField.setText("");
    }

    public static void clearPurchases() {
        //intuitivee
        cartTableModel.setRowCount(0);
        moneyField.setText("");
        changeField.setText("");
        totalField.setText("$0.00");
        currentTotal = 0;
    }

    public static void printReceipt() {
        //tis one doesn't have anything exciting except for a num generator, and some writer instatiations which can be done smarter, but I had fun
        int receiptNumber = (int) Math.floor(Math.random() * 99999);
        LocalDateTime thisDate = LocalDateTime.now();
        String path = "/home/akaraulanov26/GitHub/" + receiptNumber + Currentcustomer.getName()+  ".txt";

        try (FileWriter fw = new FileWriter(path, true)) {
            fw.write("---------------------" + "\n");
            fw.write("Cash receipt id:" + receiptNumber + "\n");
            fw.write("---------------------" + "\n\n");
            fw.write("Adrian's Warehouse    " + "\n" + "495 Birch Street, NY 10014, USA\n");
            fw.write("You were served by: " + Currentemployee.toString() + "\n\n");
            fw.write("Your purchase points have been stored under the customer: " + Currentcustomer.toString()+ "\n\n");
            fw.write("Date: " + thisDate + "\n\n");
            fw.write("---------------------" + "\n");
            fw.write("Items Purchased:" + "\n");
            fw.write("---------------------" + "\n");


            for (int i = 0; i < cartTableModel.getRowCount(); i++) {
                String name = cartTableModel.getValueAt(i, 0).toString();
                String price = cartTableModel.getValueAt(i, 1).toString();
                String quantity = cartTableModel.getValueAt(i, 2).toString();
                String total = cartTableModel.getValueAt(i, 3).toString();

                fw.write(String.format("%-20s %8s %3s %10s%n", name, price, "x" + quantity, total));
                // God bless people who write documentation for java + I could have done this much easier in the item method as an item display method, but well, I was dumb...
            }

            fw.write("\n---------------------" + "\n");
            fw.write(String.format("%-20s %22s%n", "TOTAL:", totalField.getText()));
            fw.write(String.format("%-20s %22s%n", "AMOUNT PAID:", moneyField.getText()));
            fw.write("---------------------" + "\n");
            fw.write("Thank you for shopping with us!" + "\n");
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Error printing receipt: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void printEmployeeMonthlyReport(Employee reportEmployee) {
        //nothing to explain except for the fact I USED AI HERE!!, (didn't want to write the special congradulations by hand)
        LocalDateTime thisDate = LocalDateTime.now();
        String path = "/home/akaraulanov26/GitHub/" + reportEmployee.getName() + "MonthlyReport" + ".txt";

        try (FileWriter fw = new FileWriter(path, true)) {
            fw.write("---------------------" + "\n");
            fw.write("Employee Monthly Report:" + "\n");
            fw.write("----------------------" + "\n\n\n\n");
            fw.write("Name: " + reportEmployee.getName() + "\n");
            if (reportEmployee.getSales() <= 50000) {
                fw.write("Date" + thisDate + "\n\n\n");
                fw.write("Dear " + reportEmployee.getName() + ", " + "\n");
                fw.write("Your performance this month indicates your sales number is: " + reportEmployee.getSales()+"\n");
                fw.write("Your sales performance this month has met the baseline expectations." + "\n");
                fw.write("You have demonstrated a steady and consistent effort in your role." + "\n");
                fw.write("While there is room for improvement, your current output is satisfactory." + "\n");
                fw.write("Maintaining this level of work will keep you in good standing within the team." + "\n");
                fw.write("We encourage you to continue developing your skills and seek opportunities to grow." + "\n");
                fw.write("Consider setting new personal goals for next month." + "\n");
                fw.write("Your reliability is valued and appreciated by the management team." + "\n");
                fw.write("Let’s aim for even better results moving forward." + "\n");
                fw.write("For more information feel free to contact me :)" + "\n\n");
                fw.write("-------------------------------------------" + "\n\n");
                fw.write("Adrian Karaulanov, Store Owner" + "\n\n");
                fw.write("-------------------------------------------" + "\n");

            } else if (reportEmployee.getSales() <= 65000) {
                fw.write("Date" + thisDate + "\n\n\n");
                fw.write("Dear " + reportEmployee.getName() + ", " + "\n");
                fw.write("Your performance this month indicates your sales number is: " + reportEmployee.getSales()+"\n");
                fw.write("Excellent work this month—your sales numbers have exceeded expectations." + "\n");
                fw.write("You’ve shown a strong commitment to performance and results." + "\n");
                fw.write("Your productivity stands out among your peers." + "\n");
                fw.write("We recognize your dedication and contribution to the team’s success." + "\n");
                fw.write("As a result, you are eligible for a performance bonus this cycle." + "\n");
                fw.write("Keep up the great work and continue setting a high standard." + "\n");
                fw.write("We appreciate your efforts and look forward to more success stories from you." + "\n");
                fw.write("Thank you for your valuable contribution this month." + "\n");
                fw.write("For more information feel free to contact me :)" + "\n\n");
                fw.write("-------------------------------------------" + "\n\n");
                fw.write("Adrian Karaulanov, Store Owner" + "\n\n");
                fw.write("-------------------------------------------" + "\n");
            } else if (reportEmployee.getSales() <= 90000) {
                fw.write("Date" + thisDate + "\n\n\n");
                fw.write("Dear " + reportEmployee.getName() + ", " + "\n");
                fw.write("Your performance this month indicates your sales number is: " + reportEmployee.getSales()+"\n");
                fw.write("You have consistently ranked among the top performers this month." + "\n");
                fw.write("Your outstanding sales numbers reflect a high level of professionalism and drive." + "\n");
                fw.write("Management has taken note of your consistency and impact on overall team performance." + "\n");
                fw.write("Your influence and leadership among peers have also been commendable." + "\n");
                fw.write("We are pleased to recommend you for a salary raise in recognition of your efforts." + "\n");
                fw.write("This acknowledgment comes not only from metrics but also from observed initiative and responsibility." + "\n");
                fw.write("Keep striving for excellence—you are on a path toward long-term success." + "\n");
                fw.write("Your future with the company looks bright." + "\n");
                fw.write("For more information feel free to contact me :)" + "\n\n");
                fw.write("-------------------------------------------" + "\n\n");
                fw.write("Adrian Karaulanov, Store Owner" + "\n\n");
                fw.write("-------------------------------------------" + "\n");
            } else {
                fw.write("Date" + thisDate + "\n\n\n");
                fw.write("Dear " + reportEmployee.getName() + ", " + "\n");
                fw.write("Your performance this month indicates your sales number is: " + reportEmployee.getSales()+"\n");
                fw.write("Congratulations on being named Employee of the Month!" + "\n");
                fw.write("Your unmatched sales performance has set a new benchmark for excellence." + "\n");
                fw.write("The energy and results you've brought this month are truly exceptional." + "\n");
                fw.write("You’ve not only led the team in numbers but have inspired others through your dedication and attitude." + "\n");
                fw.write("In recognition of your outstanding achievements, you will receive both a raise and an unmatched performance bonus." + "\n");
                fw.write("Your efforts have significantly contributed to the company’s goals." + "\n");
                fw.write("Management is proud to have someone of your caliber on the team." + "\n");
                fw.write("Keep up this phenomenal work—you are a model of excellence." + "\n");
                fw.write("For more information feel free to contact me :)" + "\n\n");
                fw.write("-------------------------------------------" + "\n\n");
                fw.write("Adrian Karaulanov, Store Owner" + "\n\n");
                fw.write("-------------------------------------------" + "\n");
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Error printing receipt: " + e.getMessage(),
                    "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void saveItemsToFile() {

        try (PrintWriter writer = new PrintWriter(new FileWriter("items.txt"))) {
            for (Items item : items) {
                writer.println(item.getCode() + "," + item.getName() + "," + item.getPrice() + "," + item.getCategory() + "," + item.getQuantity());
                //again should have done that in the item method, but I prefer not to jump too much in my code because I get lost ;/
            }
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Error saving items: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static void saveCustomersToFile(ArrayList<Customer> customers) {
        // a simple oos
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("customers.dat"))) {
            oos.writeObject(customers);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Error saving customers: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static ArrayList<Customer> loadCustomersFromFile() {
        //not so simple since I had to add filters as to not blow stuff up.
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("customers.dat"))) {
            return (ArrayList<Customer>) ois.readObject();
        } catch (FileNotFoundException e) {
            //new list in the case of no file info
            Customer joe1 = new Customer("0","John Doe");
            ArrayList<Customer> customers = new ArrayList<>();
            customers.add(joe1);
            return customers;
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(frame, "Error loading customers: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return new ArrayList<>();
        }
    }

    public static void saveEmployeesToFile(ArrayList<Employee> employees) {
        //same as above, literally I copied my code twice and changed names and vars
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream("employees.dat"))) {
            oos.writeObject(employees);
        } catch (IOException e) {
            JOptionPane.showMessageDialog(frame, "Error saving employees: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    public static ArrayList<Employee> loadEmployeesFromFile() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream("employees.dat"))) {
            return (ArrayList<Employee>) ois.readObject();
        } catch (FileNotFoundException e) {
            Employee joe1 = new Employee("John Doe","0",750);
            ArrayList<Employee> employees = new ArrayList<Employee>();
            employees.add(joe1);
            return employees;
        } catch (IOException | ClassNotFoundException e) {
            JOptionPane.showMessageDialog(frame, "Error loading employees: " + e.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return new ArrayList<>();
        }
    }

    public static void main(String[] args) {
        //oh boy here the spagetty code gets real, because I just did the UI randomly, sorry for your eyes
        try {
            UIManager.setLookAndFeel(UIManager.getSystemLookAndFeelClassName());
        } catch (Exception e) {
            e.printStackTrace();
        }
        // frame stuff
        frame = new JFrame("Cash Register System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(2400, 1600);
        frame.setLayout(new BorderLayout(10, 10));
        frame.getContentPane().setBackground(SECONDARY_COLOR);
        //initializing panels
        JPanel mainPanel = new JPanel(new BorderLayout(20, 20));
        mainPanel.setBorder(new EmptyBorder(20, 20, 20, 20));
        mainPanel.setBackground(SECONDARY_COLOR);
        frame.add(mainPanel, BorderLayout.CENTER);

        JPanel headerPanel = new JPanel();
        headerPanel.setBackground(PRIMARY_COLOR);
        JLabel titleLabel = new JLabel("CASH REGISTER SYSTEM", SwingConstants.CENTER);
        titleLabel.setFont(new Font("Segoe UI", Font.BOLD, 28));
        titleLabel.setForeground(Color.WHITE);
        headerPanel.add(titleLabel);
        mainPanel.add(headerPanel, BorderLayout.NORTH);

        JPanel centerPanel = new JPanel(new GridLayout(1, 3, 20, 0));
        centerPanel.setBackground(SECONDARY_COLOR);
        mainPanel.add(centerPanel, BorderLayout.CENTER);

        JPanel leftPanel = createPanel("Available Items");
        String[] itemColumns = {"Code", "Name", "Price", "Category", "Quantity"};
        itemsTableModel = new DefaultTableModel(itemColumns, 0) {
            public boolean isCellEditable(int row, int column) {
                return false;
                // preventing shenanigans
            }
        };
        //making the left table
        itemsTable = createStyledTable(itemsTableModel);
        updateItemsTable(null);

        JScrollPane itemsScrollPane = new JScrollPane(itemsTable);
        itemsScrollPane.setPreferredSize(new Dimension(400, 600));
        leftPanel.add(itemsScrollPane, BorderLayout.CENTER);
        //buttons
        JButton addToCartButton = createStyledButton("Add to Cart", ACCENT_COLOR);
        addToCartButton.addActionListener(e -> addToCart(itemsTable.getSelectedRow()));

        JPanel searchPanel = createPanel("Search");
        searchPanel.setLayout(new BorderLayout(10, 10));
        searchField = createStyledTextField("Search by ID", true);
        searchButton = createStyledButton("Go", ACCENT_COLOR);

        searchButton.addActionListener(e -> {
            String searchTerm = searchField.getText();
            updateItemsTable(searchTerm);

            if (itemsTableModel.getRowCount() > 0) {
                itemsTable.scrollRectToVisible(itemsTable.getCellRect(0, 0, true));
            }
        });
        // more UI, YIPEEE
        searchPanel.add(searchField, BorderLayout.CENTER);
        searchPanel.add(searchButton, BorderLayout.EAST);
        leftPanel.add(searchPanel, BorderLayout.SOUTH);
        leftPanel.add(addToCartButton, BorderLayout.EAST);
        centerPanel.add(leftPanel);

        JPanel middlePanel = createPanel("Shopping Cart");
        middlePanel.setLayout(new BorderLayout(10, 10));

        String[] cartColumns = {"Item", "Price", "Quantity", "Total"};
        cartTableModel = new DefaultTableModel(cartColumns, 0) {
            public boolean isCellEditable(int row, int column) {
                return false;
            }
        };
        JTable cartTable = createStyledTable(cartTableModel);
        JScrollPane cartScrollPane = new JScrollPane(cartTable);
        middlePanel.add(cartScrollPane, BorderLayout.CENTER);

        JPanel totalsPanel = new JPanel(new GridLayout(5, 2, 10, 10));
        totalsPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        totalsPanel.setBackground(Color.WHITE);
        //I love spagetti, I constantly loose myself, yet alone side programers
        JLabel totalLabel = createBoldLabel("Total:");
        totalField = createStyledTextField("0", false);
        JLabel moneyLabel = createBoldLabel("Amount Given:");
        moneyField = createStyledTextField("", true);
        JLabel changeLabel = createBoldLabel("Change Due:");
        changeField = createStyledTextField("0", false);
        JLabel enterCustomerId = createBoldLabel("Customer ID:");
        JPanel panelCust = new JPanel(new GridLayout(1, 2, 10, 10));
        customerIdField = createStyledTextField("ID",true);
        JButton saveCurentCust = createStyledButton("Add",SUCCESS_COLOR);
        saveCurentCust.addActionListener(e ->{
//            System.out.println("BANIZAAAAAA"); This one you know about, saved a lot of tears
            String currentCustomerID = customerIdField.getText();
            customerIdField.setText("ID");
            for(Customer customer : customers){
                if(customer.getID().equals(currentCustomerID)){
                    Currentcustomer = customer;
                    System.out.println(Currentcustomer.toString());
                }
            }
        });
        // more spagetti UI
        JLabel addEmployeeID = createBoldLabel("EmployeeID:");
        JPanel panelEmp = new JPanel(new GridLayout(1,2,10,10));
        employeeIDField = createStyledTextField("ID", true);
        JButton saveCurentEmp = createStyledButton("Add",SUCCESS_COLOR);
        saveCurentEmp.addActionListener(e ->{
            System.out.println("MAZNAAAA");
            String currentEmployeeID = employeeIDField.getText();
            employeeIDField.setText("ID");
            for(Employee emp : employees){
                if(emp.getEmployeeID().equals(currentEmployeeID)){
                    Currentemployee = emp;
                }
            }
        });
        // pretty sure this could have been optimised but well I am lazy, sorry again. :)
        totalsPanel.add(totalLabel);
        totalsPanel.add(totalField);
        totalsPanel.add(moneyLabel);
        totalsPanel.add(moneyField);
        totalsPanel.add(changeLabel);
        totalsPanel.add(changeField);
        totalsPanel.add(enterCustomerId);
        panelCust.add(customerIdField);
        panelCust.add(saveCurentCust);
        totalsPanel.add(panelCust);
        totalsPanel.add(addEmployeeID);
        panelEmp.add(employeeIDField);
        panelEmp.add(saveCurentEmp);
        totalsPanel.add(panelEmp);
        middlePanel.add(totalsPanel, BorderLayout.NORTH);
        // styling and paneling
        JPanel buttonsPanel = new JPanel(new GridLayout(3, 1, 10, 10));
        buttonsPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        buttonsPanel.setBackground(Color.WHITE);

        JButton calculateChangeButton = createStyledButton("Calculate Change", PRIMARY_COLOR);
        calculateChangeButton.addActionListener(e -> calculateChange());
        buttonsPanel.add(calculateChangeButton);

        JPanel roundPanel = new JPanel(new GridLayout(1, 1, 10, 0));
        roundPanel.setBackground(Color.WHITE);
        JButton round50Button = createStyledButton("Complete Purchase", PRIMARY_COLOR);
        round50Button.addActionListener(e -> {
            if (cartTableModel.getRowCount() > 0 && Currentcustomer != null && Currentemployee != null) {
                printReceipt();
                clearPurchases();
                Currentcustomer.addPurchase(Double.parseDouble(totalLabel.getText()));
                System.out.println(Currentcustomer.toString());
            } else {
                JOptionPane.showMessageDialog(frame, "Something seems fishy my guy", "Error", JOptionPane.ERROR_MESSAGE);
            }
        });

        roundPanel.add(round50Button);
        buttonsPanel.add(roundPanel);
        // still UI :)
        JPanel changeButtonsPanel = new JPanel(new GridLayout(2, 4, 5, 5));
        changeButtonsPanel.setBackground(Color.WHITE);
        String[] denominations = {"$0.01", "$0.05", "$0.25", "$0.5", "$1", "$5", "$10", "$20", "$50", "$100"};
        for (String denom : denominations) {
            JButton btn = createStyledButton(denom, ACCENT_COLOR);
            btn.addActionListener(e -> returnChange(denom));
            changeButtonsPanel.add(btn);
        }
        buttonsPanel.add(changeButtonsPanel);
        middlePanel.add(buttonsPanel, BorderLayout.SOUTH);
        centerPanel.add(middlePanel);

        JPanel rightPanel = createPanel("Administration");
        rightPanel.setLayout(new BorderLayout(10, 10));

        JPanel passwordPanel = new JPanel(new BorderLayout(10, 10));
        passwordPanel.setBorder(new EmptyBorder(10, 10, 10, 10));
        passwordPanel.setBackground(Color.WHITE);
        JLabel passwordLabel = createBoldLabel("Admin Password:");
        passwordField = new JPasswordField();
        passwordField.setFont(new Font("Segoe UI", Font.PLAIN, 14));
        JButton loginButton = createStyledButton("Login", PRIMARY_COLOR);
        loginButton.addActionListener(e -> toggleAdminPanel());
        passwordPanel.add(passwordLabel, BorderLayout.NORTH);
        passwordPanel.add(passwordField, BorderLayout.CENTER);
        passwordPanel.add(loginButton, BorderLayout.SOUTH);
        rightPanel.add(passwordPanel, BorderLayout.NORTH);

        adminPanel = new JPanel(null);
        adminPanel.setBorder(new CompoundBorder(
                new TitledBorder("Admin Controls"),
                new EmptyBorder(10, 10, 10, 10))
        );
        adminPanel.setBackground(Color.WHITE);
        adminPanel.setVisible(false);
        // welp I could have optimised stuff inteligently, but here go extra 10 lines :)
        int yPos = 30;
        itemCodeField = createAdminField("Item Code:", 20, yPos);
        yPos += 50;
        itemNameField = createAdminField("Name:", 20, yPos);
        yPos += 50;
        itemPriceField = createAdminField("Price:", 20, yPos);
        yPos += 50;
        itemCategoryField = createAdminField("Category:", 20, yPos);
        yPos += 50;
        itemQuantityField = createAdminField("Quantity:", 20, yPos);
        yPos += 50;
        registerCustomerID = createAdminField("Enter new customer ID:",20,yPos);
        yPos += 50;
        registerCustomerName = createAdminField("Enter new customer name:",20,yPos);
        yPos += 50;
        registerEmployeeID = createAdminField("Enter new employee ID:",20,yPos);
        yPos += 50;
        registerEmployeeName = createAdminField("Enter new employee name:",20,yPos);
        yPos += 50;
        registerEmployeeBaseSalary = createAdminField("Enter new employee base-salary:",20,yPos);
        yPos +=50;
        printEmployeeReport = createAdminField("Enter Report EmployeeID:",20,yPos);
        yPos += 50;

        JButton registerCustomerButton = createStyledButton("Register Customer", SUCCESS_COLOR);
        registerCustomerButton.setBounds(240, yPos, 200, 40);
        registerCustomerButton.addActionListener(e -> {
            String customerID = registerCustomerID.getText();
            String customerName = registerCustomerName.getText();

            if (!customerID.isEmpty() && !customerName.isEmpty()) {
                customers.add(new Customer(customerID, customerName));
                saveCustomersToFile(customers);

                registerCustomerID.setText("");
                registerCustomerName.setText("");
            }
        });

        adminPanel.add(registerCustomerButton);

        JButton registerEmployeeButton = createStyledButton("Register Employee", SUCCESS_COLOR);
        registerEmployeeButton.setBounds(460, yPos, 200, 40);
        // just buttons, not so fun stuff, but I had to not f- things up
        registerEmployeeButton.addActionListener(e -> {
            String employeeID = registerEmployeeID.getText();
            String employeeName = registerEmployeeName.getText();
            double employeeBaseSalary = Double.parseDouble(registerEmployeeBaseSalary.getText());
            if(!employeeName.isEmpty() && !employeeID.isEmpty() && employeeBaseSalary != 0){
                employees.add(new Employee(employeeName,employeeID,employeeBaseSalary));
                saveEmployeesToFile(employees);
                registerEmployeeID.setText("");
                registerEmployeeName.setText("");
                registerEmployeeBaseSalary.setText("");
            }
        });
        JButton printEmployeeReport1 = createStyledButton("Print Employee Details",SUCCESS_COLOR);
        printEmployeeReport1.setBounds(20, yPos+50, 200, 40);
        printEmployeeReport1.addActionListener(e ->{
//            System.out.println("Tedolini Domatini"); ignore
            for(Employee employee: employees){
//                System.out.println("IDK, work"); seriously ignore
                if(employee.getEmployeeID().equals(printEmployeeReport.getText())){
                    reportEmp = employee;
//                    System.out.println("Hi nick"); don't even ask who nick is :(
                }
            }
            printEmployeeReport.setText("");
            printEmployeeMonthlyReport(reportEmp);
        });
        //almost done with UI, next time I promise to add some inteligence and split it into methods
        adminPanel.add(printEmployeeReport1);
        adminPanel.add(registerEmployeeButton);
        JButton saveAndInsertButton = createStyledButton("Add/Save Item", SUCCESS_COLOR);
        saveAndInsertButton.setBounds(20, yPos, 200, 40);
        saveAndInsertButton.addActionListener(e -> {
            addOrUpdateItem();
            saveItemsToFile();
        });
        adminPanel.add(saveAndInsertButton);

        rightPanel.add(adminPanel, BorderLayout.CENTER);
        centerPanel.add(rightPanel);
        loadItemsFromFile();
        customers = loadCustomersFromFile();
        employees = loadEmployeesFromFile();
        frame.setVisible(true);
    }
}

class Items {
    // absolutelly nothing exciting, just custom boxes cor strings and ints
    private String name;
    private int price;
    private int category;
    private int quantity;
    private String code;

    public Items(String name, int price, int category, int quantity, String code) {
        this.name = name;
        this.price = price;
        this.category = category;
        this.quantity = quantity;
        this.code = code;
    }

    public String getName() {
        return name;
    }

    public int getPrice() {
        return price;
    }

    public int getCategory() {
        return category;
    }

    public int getQuantity() {
        return quantity;
    }

    public String getCode() {
        return code;
    }

    public void setName(String name) {
        this.name = name;
    }

    public void setPrice(int price) {
        this.price = price;
    }

    public void setCategory(int category) {
        this.category = category;
    }

    public void setQuantity(int quantity) {
        this.quantity = quantity;
    }
}

class Employee implements Serializable {
    // absolutelly nothing exciting, just custom boxes cor strings and ints
    private String name;
    private double baseSalary;
    private int sales;
    private String employeeID;

    public Employee(String name, String employeeID, double baseSalary) {
        this.name = name;
        this.employeeID = employeeID;
        this.baseSalary = baseSalary;
        this.sales = 0;
    }

    public String getName() {
        return name;
    }

    public String getEmployeeID() {
        return employeeID;
    }

    public int getSales() {
        return sales;
    }

    public void addSale(int amount) {
        this.sales += amount;
    }

    public double calculateBonus() {
        if (sales <= 50000) {
            return 0.0; // No bonus
        } else if (sales <= 65000) {
            return baseSalary * 0.1;
        } else if (sales <= 90000) {
            return baseSalary * 0.2;
        } else {
            return baseSalary * 0.3;
        }
    }

    public double getTotalSalary() {
        return baseSalary + calculateBonus();
    }

    public String toString() {
        return "ID:" + this.getEmployeeID() + " | Name: " + this.getName();
    }
}

class Customer implements Serializable {
    // absolutelly nothing exciting, just custom boxes cor strings and ints
    private String ID;
    private String name;
    private double purchases;
    private int rewardPoints;

    public Customer(String ID, String name) {
        this.ID = ID;
        this.name = name;
        this.purchases = 0;
        this.rewardPoints = 0;
    }

    public String getID() {
        return ID;
    }

    public String getName() {
        return name;
    }

    public double getPurchases() {
        // I should have added some more exciting stuff, but I forgot, so pretend as if you don't see it
        return purchases;
    }

    public int getRewardPoints() {
        return rewardPoints;
    }

    public void addPurchase(double amount) {
        this.purchases += amount;
        this.rewardPoints += (int)(amount * calculateRewardMultiplier());
    }

    private double calculateRewardMultiplier() {
        if (purchases <= 300) {
            return 0.01;
        } else if (purchases <= 500) {
            return 0.02;
        } else if (purchases <= 750) {
            return 0.03;
        } else {
            return 0.05;
        }
    }

    public String toString() {
        return "ID: " + this.getID() + " | Under the name of: "+ this.getName() + " | With total reward points: " + this.getRewardPoints();
    }
}





// I just want 1000 lines :), (shortened like 25 in the documentation and comentation
